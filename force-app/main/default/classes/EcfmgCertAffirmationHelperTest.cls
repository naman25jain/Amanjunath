@isTest
public class EcfmgCertAffirmationHelperTest extends ECFMGTestFactory{
    public static testMethod void testAcceptedScenario(){
        ECFMGTestFactory.make(ECFMGDefaultTestData.DefaultDocConfigData.class, new cadmus_core__Doc_Config__c(Name = 'ECFMG_CERT', cadmus_core__CustomerDocumentConfigId__c = Constant_PDF_Butler__mdt.getInstance('ECFMG_CERT').Value__c));
		run();
        Account acc = new Account();
        acc.Name = 'Test Account4';
        acc.BillingCountry = 'India';
        INSERT acc;
        System.assert(acc.Id != null, 'Account creation failed');
        Contact con = new Contact();
        con.AccountId = acc.Id;
        con.LastName = 'Test';
        con.Email = 'test4@test.com';
        INSERT con;
        System.assert(con.Id != null, 'Contact creation failed');
        Id ecfmgCertRecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_ECFMG_Certification).getRecordTypeId();
        Case examRegCase = new Case();
        examRegCase.RecordTypeId = ecfmgCertRecordTypeId;
        examRegCase.ContactId = con.Id;
        examRegCase.Internal_Status__c = Constants.CASE_STATUS_FINAL_QA_COMPLETE;
        INSERT examRegCase;
        System.assert(examRegCase.Id != null, 'Case creation failed');
        List<Exam_Registration__c> examRegs = new List<Exam_Registration__c>();
        Exam_Registration__c examRegObject = new Exam_Registration__c();
        examRegObject.Applicant__c = con.Id;
        examRegObject.Exam_Status__c = Constants.EXAM_REGISTRATION_EXAM_STATUS_PASSED;
        examRegObject.Exam_Types__c = Constants.EXAM_REGISTRATION_EXAM_TYPES_USMLESTEPONE;
        examRegs.add(examRegObject);
        Exam_Registration__c examRegObject1 = new Exam_Registration__c();
        examRegObject1.Applicant__c = con.Id;
        examRegObject1.Exam_Status__c = Constants.EXAM_REGISTRATION_EXAM_STATUS_PASSED;
        examRegObject1.Exam_Types__c = Constants.EXAM_REGISTRATION_EXAM_TYPES_USMLESTEPTWOCK;
        examRegs.add(examRegObject1);
        insert examRegs;
        System.assert(examRegObject1.Id != null, 'Exam registration creation failed');
        List<Id> caseIds = new List<Id>();
        caseIds.add(examRegCase.Id);
        EcfmgCertAffirmationHelper.handleAffirmationCompleted(caseIds);
        Boolean certifiedOn = [SELECT Applicant_Certified_On__c FROM Exam_Registration__c WHERE id=:examRegObject1.Id][0].Applicant_Certified_On__c;
        System.assert(certifiedOn == true, 'Exam registration update failed');
    }
    public static testMethod void testRejectedScenario(){
        test.startTest();
        Account acc = new Account();
        acc.Name = 'Test Account4';
        acc.BillingCountry = 'India';
        INSERT acc;
        System.assert(acc.Id != null, 'Account4 creation failed');
        Contact con = new Contact();
        con.AccountId = acc.Id;
        con.LastName = 'Test';
        con.Email = 'test4@test.com';
        INSERT con;
        System.assert(con.Id != null, 'New Contact creation failed');
        Id ecfmgCertRecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_ECFMG_Certification).getRecordTypeId();
        Case ecfmgCase = new Case();
        ecfmgCase.RecordTypeId = ecfmgCertRecordTypeId;
        ecfmgCase.ContactId = con.Id;
        ecfmgCase.Internal_Status__c = Constants.CASE_STATUS_INCOMPLETE;
        INSERT ecfmgCase;
        System.assert(ecfmgCase.Id != null, 'New Case creation failed');
        EcfmgCertAffirmationHelper.handleAffirmationRejected(ecfmgCase);
        Case caseObj = [SELECT Internal_Status__c FROM Case WHERE Id =:ecfmgCase.Id];
        String caseStatus = caseObj.Internal_Status__c;
        System.assertEquals(caseStatus, Constants.CASE_STATUS_INCOMPLETE, 'Case Status is not Pending Applicant Action - Resubmit Documents');
        test.StopTest();
    }
    @isTest
    public static void testAffirmationReviewRejection(){
        Account acc = new Account();
        acc.Name = 'Test Account';
        acc.BillingCountry = 'India';
        INSERT acc;
        Contact con = new Contact();
        con.AccountId = acc.Id;
        con.LastName = 'Test';
        con.Email = 'test@test.com';
        INSERT con;
        Id ecfmgCertRecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_ECFMG_Certification).getRecordTypeId();
        Id credVerRecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_CREDENTIAL_VERIFICATION).getRecordTypeId();
        Case ecfmgCase = new Case();
        ecfmgCase.RecordTypeId = ecfmgCertRecordTypeId;
        ecfmgCase.ContactId = con.Id;
        ecfmgCase.Internal_Status__c = Constants.CASE_STATUS_FINAL_QA_COMPLETE;
        INSERT ecfmgCase;
        Case credVerCase = new Case();
        credVerCase.RecordTypeId = credVerRecordTypeId;
        credVerCase.ContactId = con.Id;
        credVerCase.Internal_Status__c = Constants.CASE_STATUS_ACCEPTED;
        credVerCase.Document_Type__c = Constants.CASE_DOC_TYPE_FINAL_MED_SCHOOL_TRANSCRIPT;
        INSERT credVerCase;
        affirmation__c affr = new affirmation__c();
        affr.Document_is_a_Final_Medical_Diploma__c = Constants.AFFIRMATION_PICKLIST_VALUE_YES;
        affr.Original_Language_Document_Submitted__c = Constants.AFFIRMATION_PICKLIST_VALUE_NO;
        affr.Asset_Type__c = Constants.AFFIRMATION_ASSET_TYPE_FINAL_DIPLOMA;
        affr.case__c = ecfmgCase.Id;
        affr.Verification_Form_Acceptable__c = Constants.AFFIRMATION_PICKLIST_VALUE_YES;
        affr.Date_Of_Birth__c = Constants.AFFIRMATION_DOB_PRESENT_NOT_MATCH_NO_DOC;
        insert affr;
        affirmation__c affrTranscript = new affirmation__c();
        affrTranscript.Asset_Type__c = Constants.AFFIRMATION_ASSET_TYPE_FINAL_TRANSCRIPT;
        affrTranscript.case__c = ecfmgCase.Id;
        affrTranscript.Verification_Form_Acceptable__c = Constants.AFFIRMATION_PICKLIST_VALUE_NO;
        insert affrTranscript;
        affirmation__c affrTct = new affirmation__c();
        affrTct.Document_is_a_TCT__c = Constants.AFFIRMATION_PICKLIST_VALUE_YES;
        affrTct.Transfer_Credit_Exception_Granted__c = false;
        affrTct.Translation_is_complete_and_legible__c = Constants.AFFIRMATION_PICKLIST_VALUE_NO;
        affrTct.Asset_Type__c = Constants.AFFIRMATION_ASSET_TYPE_TCT;
        affrTct.case__c = ecfmgCase.Id;
        affrTct.Verification_Form_Acceptable__c = Constants.AFFIRMATION_PICKLIST_VALUE_NO;
        affrTct.Name_on_Document__c = Constants.AFFIRMATION_NAME_DOC_REQUIRES_REVIEW;
        insert affrTct;
        set<id> affrIds = new set<id>();
        affrIds.add(affr.id);
        affrIds.add(affrTranscript.id);
        affrIds.add(affrTct.id);
        id catRecTypeId = Schema.SObjectType.Contact_Association_Type__c.getRecordTypeInfosByDeveloperName().get(Constants.CONASCTYPE_RECORD_TYPE_MEDICAL_SCHOOL).getRecordTypeId();
        Contact_Association_Type__c cat = new Contact_Association_Type__c();
        cat.RecordTypeId = catRecTypeId;
        cat.Contact__c = con.Id;
        cat.Account__c = acc.Id;	
        insert cat;
        Asset asst = new Asset();
        asst.Name = Constants.ASSET_TYPE_FINAL_MED_DIPLOMA;
        asst.Status = Constants.ASSET_STATUS_ACCEPTED;
        asst.contactId = con.Id;
        asst.Type__c = Constants.ASSET_TYPE_FINAL_MED_DIPLOMA;
        insert asst;
        Asset asstTrans = new Asset();
        asstTrans.Name = 'Final Medical Diploma - Translation';
        asstTrans.Status = Constants.ASSET_STATUS_ACCEPTED;
        asstTrans.contactId = con.Id;
        asstTrans.Type__c = Constants.ASSET_TYPE_TRANSLATION;
        asstTrans.ParentId = asst.Id;
        insert asstTrans;
        Id credRecordTypeId = Schema.SObjectType.Asset.getRecordTypeInfosByDeveloperName().get(Constants.ASSET_RECORD_TYPE_CREDENTIAL).getRecordTypeId();
        Asset asst1 = new Asset();
        asst1.Name = Constants.ASSET_TYPE_FINAL_MED_SCHOOL_TRANSCRIPT;
        asst1.Status = Constants.ASSET_STATUS_ACCEPTED;
        asst1.contactId = con.Id;
        asst1.RecordTypeId = credRecordTypeId;
        asst1.Type__c = Constants.ASSET_TYPE_FINAL_MED_SCHOOL_TRANSCRIPT;
        asst1.case__c=credVerCase.Id;
        insert asst1;
        Asset asst2 = new Asset();
        asst2.Name = Constants.ASSET_TYPE_VERIFIED_FINAL_TRANSCRIPT_CREDENTIAL;
        asst2.Status = Constants.ASSET_STATUS_ACCEPTED;
        asst2.contactId = con.Id;
        asst2.RecordTypeId = credRecordTypeId;
        asst2.Type__c = Constants.ASSET_TYPE_VERIFIED_FINAL_TRANSCRIPT_CREDENTIAL;
        asst2.case__c=credVerCase.Id;
        insert asst2;
        Asset asst3 = new Asset();
        asst3.Name = Constants.ASSET_TYPE_TCT;
        asst3.Status = Constants.ASSET_STATUS_ACCEPTED;
        asst3.contactId = con.Id;
        asst3.RecordTypeId = credRecordTypeId;
        asst3.Type__c = Constants.ASSET_TYPE_TCT;
        asst3.case__c=credVerCase.Id;
        asst3.Contact_Association_Type__c = cat.id;
        insert asst3;
        Asset asst4 = new Asset();
        asst4.Name = Constants.ASSET_TYPE_NAME_DOC;
        asst4.Status = Constants.ASSET_STATUS_ACCEPTED;
        asst4.contactId = con.Id;
        asst4.RecordTypeId = credRecordTypeId;
        asst4.Type__c = Constants.ASSET_TYPE_NAME_DOC;
        asst4.parentid = asst3.id;
        insert asst4;
        Asset asst5 = new Asset();
        asst5.Name = Constants.ASSET_TYPE_TRANSLATION;
        asst5.Status = Constants.ASSET_STATUS_ACCEPTED;
        asst5.contactId = con.Id;
        asst5.RecordTypeId = credRecordTypeId;
        asst5.Type__c = Constants.ASSET_TYPE_TRANSLATION;
        asst5.parentid = asst3.id;
        insert asst5;
        Asset asst6 = new Asset();
        asst6.Name = Constants.ASSET_TYPE_FINAL_TRANSCRIPT_VERIFICATION_FORM;
        asst6.Status = Constants.ASSET_STATUS_ACCEPTED;
        asst6.contactId = con.Id;
        asst6.RecordTypeId = credRecordTypeId;
        asst6.Type__c = Constants.ASSET_TYPE_FINAL_TRANSCRIPT_VERIFICATION_FORM;
        asst6.ParentId = asst1.id;
        asst2.case__c=credVerCase.Id;
        insert asst6;
        Asset asst7 = new Asset();
        asst7.Name = Constants.ASSET_TYPE_VERIFIED_TRANSFER_CREDIT_TRANSCRIPT;
        asst7.Status = Constants.ASSET_STATUS_ACCEPTED;
        asst7.contactId = con.Id;
        asst7.RecordTypeId = credRecordTypeId;
        asst7.Type__c = Constants.ASSET_TYPE_VERIFIED_TRANSFER_CREDIT_TRANSCRIPT;
        asst7.ParentId = asst1.id;
        asst7.Case__c = credVerCase.Id;
        insert asst7;
        id nameRevCaseRecTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_NAME_REVIEW).getRecordTypeId();
        test.startTest();
        EcfmgCertAffirmationHelper.affirmationReviewRejection(affrIds);
        Asset ass = [select id,status from Asset where type__c = :Constants.ASSET_TYPE_FINAL_MED_DIPLOMA];
        system.assertEquals(Constants.ASSET_STATUS_INCOMPLETE, ass.status, 'ass status is not INCOMPLETE');
		Asset asstTran = [select id,DOB_Review_Case__c from Asset where type__c =: Constants.ASSET_TYPE_TRANSLATION and ParentId =: ass.Id];
        System.assert(asstTran.DOB_Review_Case__c!=null,'DOB case is not updated');
        Asset ass2 = [select id,status from Asset where type__c = :Constants.ASSET_TYPE_VERIFIED_FINAL_TRANSCRIPT_CREDENTIAL];
        system.assertEquals(Constants.ASSET_STATUS_INCOMPLETE, ass2.status, 'ass2 status is not INCOMPLETE');
        Asset ass3 = [select id,status from Asset where type__c = :Constants.ASSET_TYPE_FINAL_TRANSCRIPT_VERIFICATION_FORM];
        system.assertEquals(Constants.ASSET_STATUS_INCOMPLETE, ass3.status, 'ass3 status is not INCOMPLETE');
        Case nameRevCase = [select id from Case where recordtypeId= :nameRevCaseRecTypeId];
        Asset ass4 = [select id,name_review_case__c,status from Asset where type__c = :Constants.ASSET_TYPE_TCT];
        Asset ass5 = [select id,name_review_case__c from Asset where type__c = :Constants.ASSET_TYPE_TRANSLATION and parentId =: ass4.Id];
        Asset ass6 = [select id,name_review_case__c from Asset where type__c = :Constants.ASSET_TYPE_NAME_DOC];
        system.assertEquals(nameRevCase.id, ass4.name_review_case__c, 'ass4 not mapped to Name review case');
        system.assertEquals(nameRevCase.id, ass5.name_review_case__c, 'ass5 not mapped to Name review case');
        system.assertEquals(nameRevCase.id, ass6.name_review_case__c, 'ass6 not mapped to Name review case');
        system.assertEquals(Constants.ASSET_STATUS_INCOMPLETE, ass4.status, 'Asset status is not INCOMPLETE');
        Asset ass7 = [select id,status from Asset where type__c = :Constants.ASSET_TYPE_VERIFIED_TRANSFER_CREDIT_TRANSCRIPT];
        system.assertEquals(Constants.ASSET_STATUS_INCOMPLETE, ass7.status, 'ass7 status is not INCOMPLETE');
        Case credVerCaseUpdated = [select id,Internal_Status__c from Case where recordtypeId= :credVerRecordTypeId];
        system.assertEquals(Constants.CASE_STATUS_COMPILE_PACKET, credVerCaseUpdated.Internal_Status__c, 'Credential Verification Case status is not COMPILE PACKET');
        test.stopTest();
    }
}