/* Test Class for AggregatePerformanceReportTest class*/
@isTest
public class AggregatePerformanceReportTest {
    public static final String ASSERT_INSERT = 'Insert failed';
    public static final String ASSERT_UPDATE = 'Update failed';
    public static final String ASSERT_DELETE = 'Delete failed';
    public static final String ASSERT_RETURNED_VALUE = 'Returned value should be No document created';
    public static final String ASSERT_NO_DOC = 'No document created';
    public static testMethod void testGetReportYear() {
        List<String> returnVal = new List<string>();
        List<Aggregate_Performance_Data__c> aggList = new List<Aggregate_Performance_Data__c>();   
        ID countryRecordTypeId = Schema.SObjectType.Aggregate_Performance_Data__c.getRecordTypeInfosByDeveloperName().get(Constants.APD_RECORD_TYPE_AGGREGAETPD_COUNTRY).getRecordTypeId();
        Aggregate_Performance_Data__c countryRec = new Aggregate_Performance_Data__c();
        countryRec.Name = 'FaimerAggregate';
        countryRec.RecordTypeId = countryRecordTypeId;
        countryRec.Data_agg_year__c = '2015';
        aggList.add(countryRec);
		ID specialRecordTypeId = Schema.SObjectType.Aggregate_Performance_Data__c.getRecordTypeInfosByDeveloperName().get(Constants.APD_RECORD_TYPE_SPECIALREPORTPD).getRecordTypeId();        
        Aggregate_Performance_Data__c specialRec = new Aggregate_Performance_Data__c();
        specialRec.Name = 'SpecialAggregate';
        specialRec.RecordTypeId = specialRecordTypeId;
        specialRec.Data_agg_year__c = '2018';
        aggList.add(specialRec);
        Id recordTypeIdAcc = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get('Entity').getRecordTypeId();
        Account acc = new Account();
        acc.Name = 'TEST_ACOUNT';
        acc.recordTypeId = recordTypeIdAcc;
        acc.BillingCountry = 'India';
        insert acc;
        System.assert(acc.Id!= null,'Account is not created');
        Aggregate_Performance_Data__c specialRec1 = new Aggregate_Performance_Data__c();
        specialRec1.Name = 'SpecialAggregate';
        specialRec1.RecordTypeId = specialRecordTypeId;
        specialRec1.Data_agg_year__c = '2019';
        specialRec1.School_Name__c = acc.Id;
        specialRec1.Bs_1f_take_count__c = 6;
        specialRec1.Ck_1f_take_count__c = 8;
        specialRec1.Cs_1f_take_count__c = 9;
        aggList.add(specialRec1);
        insert aggList;
        system.assert(aggList[0].Id != null,'Aggregate Performance data is not created');
        List<cadmus_core__Doc_Config__c> docConfigList = new List<cadmus_core__Doc_Config__c>();
        cadmus_core__Doc_Config__c docConfig = new cadmus_core__Doc_Config__c();
        docConfig.Name = 'Special Report 5 years';
        docConfig.cadmus_core__CustomerDocumentConfigId__c = Constants.DOCCONFIG_APD_FAIMERREPORT_5_YEARS;
        docConfig.RecordTypeId = Schema.SObjectType.cadmus_core__Doc_Config__c.getRecordTypeInfosByDeveloperName().get('MAIN').getRecordTypeId();
        docConfigList.add(docConfig);
        cadmus_core__Doc_Config__c docConfig1 = new cadmus_core__Doc_Config__c();
        docConfig1.Name = 'Special Report 3 years';
        docConfig1.cadmus_core__CustomerDocumentConfigId__c = Constants.DOCCONFIG_APD_FAIMERREPORT_3_YEARS;
        docConfig1.RecordTypeId = Schema.SObjectType.cadmus_core__Doc_Config__c.getRecordTypeInfosByDeveloperName().get('MAIN').getRecordTypeId();
        docConfigList.add(docConfig1);
        INSERT docConfigList;
        system.assert(docConfigList[0].Id != null,'Doc Config is not created');
        Test.startTest();
            returnVal = AggregatePerformanceReport.getReportYear(Constants.APD_FAIMERREPORT_SPECIAL,'');
            system.assertEquals(returnVal[0], specialRec.Data_agg_year__c,'Returned value is not the correct year');
            returnVal = AggregatePerformanceReport.getReportYear(Constants.APD_FAIMERREPORT_AGGREGATE,'');
            system.assertEquals(returnVal[0], countryRec.Data_agg_year__c,'Returned value is not the correct year here');
            String retVal5Years = AggregatePerformanceReport.getApdRecord('2019',acc.Id);
            system.assertEquals(retVal5Years,'','URL returned is incorrect for 5 years');
            specialRec1.Bs_1f_take_count__c = 3;
            update specialRec1;
            system.assert(specialRec1.Bs_1f_take_count__c == 3,'APD condition is not satisfied for 3 years');
            String retVal3Years = AggregatePerformanceReport.getApdRecord('2019',acc.Id);
            system.assertEquals(retVal3Years,'','URL returned is incorrect');
        Test.stopTest(); 
    }
    
    public static testMethod void testAggregateReportStep1(){
        List<cadmus_core__Doc_Config__c> docs = new List<cadmus_core__Doc_Config__c>();
        cadmus_core__Doc_Config__c docConfig1 = new cadmus_core__Doc_Config__c();
        docConfig1.cadmus_core__CustomerDocumentConfigId__c = Constants.DOCCONFIG_APD_SCHOOL_STEP1_1_YEAR;
        docConfig1.Name = 'Test';
        docs.add(docConfig1);
        cadmus_core__Doc_Config__c docConfig2 = new cadmus_core__Doc_Config__c();
        docConfig2.cadmus_core__CustomerDocumentConfigId__c = Constants.DOCCONFIG_APD_SCHOOL_STEP1_5_YEAR;
        docConfig2.Name = 'Test';
        docs.add(docConfig2);
        cadmus_core__Doc_Config__c docConfig3 = new cadmus_core__Doc_Config__c();
        docConfig3.cadmus_core__CustomerDocumentConfigId__c = Constants.DOCCONFIG_APD_COUNTRY_STEP1_1_YEAR;
        docConfig3.Name = 'Test';
        docs.add(docConfig3);
        cadmus_core__Doc_Config__c docConfig4 = new cadmus_core__Doc_Config__c();
        docConfig4.cadmus_core__CustomerDocumentConfigId__c = Constants.DOCCONFIG_APD_COUNTRY_STEP1_5_YEAR;
        docConfig4.Name = 'Test';
        docs.add(docConfig4);
        cadmus_core__Doc_Config__c docConfig5 = new cadmus_core__Doc_Config__c();
        docConfig5.cadmus_core__CustomerDocumentConfigId__c = Constants.DOCCONFIG_APD_COVER_LETTER;
        docConfig5.Name = 'Test';
        docs.add(docConfig5);
        INSERT docs;
        System.assert(docs[0].Id != null, ASSERT_INSERT);
        Account acc = new Account();
        acc.Name = 'Test';
        acc.BillingCountry = 'India';
        INSERT acc;
        System.assert(acc.Id != null, ASSERT_INSERT);
        Id schRTId = Schema.SObjectType.Aggregate_Performance_Data__c.getRecordTypeInfosByDeveloperName().get(Constants.APD_RECORD_TYPE_AGGREGAETPD_SCHOOL).getRecordTypeId();
        Aggregate_Performance_Data__c schoolRec = new Aggregate_Performance_Data__c();
        schoolRec.Name = 'FaimerAggregate';
        schoolRec.RecordTypeId = schRTId;
        schoolRec.Data_agg_year__c = '2015';
        schoolRec.School_Name__c = acc.Id;
        schoolRec.Bs_1f_take_count__c = 5;
        schoolRec.Bs_1r_take_count__c = 5;
        INSERT schoolRec;
        System.assert(schoolRec.Id != null, ASSERT_INSERT);
        System.assertEquals(ASSERT_NO_DOC, AggregatePerformanceReport.generateAggregateReport('2015', acc.Id), ASSERT_RETURNED_VALUE);
        schoolRec.Bs_1f_take_count__c = 4;
        schoolRec.Bs_1r_take_count__c = 4;
        schoolRec.Bs_5f_take_count__c = 5;
        schoolRec.Bs_5r_take_count__c = 5;
        UPDATE schoolRec;
        System.assert(schoolRec.Bs_5r_take_count__c == 5, ASSERT_INSERT);
        System.assertEquals(ASSERT_NO_DOC, AggregatePerformanceReport.generateAggregateReport('2015', acc.Id), ASSERT_RETURNED_VALUE);
        schoolRec.Bs_5f_take_count__c = 4;
        schoolRec.Bs_5r_take_count__c = 4;
        System.assert(schoolRec.Bs_5r_take_count__c == 4, ASSERT_UPDATE);
        UPDATE schoolRec;
        Id ctyRTId = Schema.SObjectType.Aggregate_Performance_Data__c.getRecordTypeInfosByDeveloperName().get(Constants.APD_RECORD_TYPE_AGGREGAETPD_COUNTRY).getRecordTypeId();
        Aggregate_Performance_Data__c cntryRec = new Aggregate_Performance_Data__c();
        cntryRec.Name = 'FaimerAggregate';
        cntryRec.RecordTypeId = ctyRTId;
        cntryRec.Data_agg_year__c = '2015';
        cntryRec.School_Name__c = acc.Id;
        cntryRec.Country_Name__c = 'India';
        cntryRec.Bs_1f_take_count__c = 5;
        cntryRec.Bs_1r_take_count__c = 5;
        INSERT cntryRec;
        System.assert(cntryRec.Id != null, ASSERT_INSERT);
        System.assertEquals(ASSERT_NO_DOC, AggregatePerformanceReport.generateAggregateReport('2015', acc.Id), ASSERT_RETURNED_VALUE);
        cntryRec.Bs_1f_take_count__c = 4;
        cntryRec.Bs_1r_take_count__c = 4;
        cntryRec.Bs_5f_take_count__c = 5;
        cntryRec.Bs_5r_take_count__c = 5;
        UPDATE cntryRec;
        System.assert(cntryRec.Bs_5r_take_count__c == 5, ASSERT_UPDATE);
        System.assertEquals(ASSERT_NO_DOC, AggregatePerformanceReport.generateAggregateReport('2015', acc.Id), ASSERT_RETURNED_VALUE);
        DELETE schoolRec;
        List<Aggregate_Performance_Data__c> aggList = [SELECT Id FROM Aggregate_Performance_Data__c WHERE Id =:schoolRec.Id];
        System.assertEquals(aggList.isEmpty(), true, ASSERT_DELETE);
        System.assertEquals(ASSERT_NO_DOC, AggregatePerformanceReport.generateAggregateReport('2015', acc.Id), ASSERT_RETURNED_VALUE);
        ContentVersion cv = new ContentVersion();
        cv.Title = 'Test Document';
        cv.PathOnClient = 'TestDocument.pdf';
        cv.VersionData = Blob.valueOf('Test Content');
        cv.IsMajorVersion = true;
        Insert cv;
        System.assert(cv.Id != null, ASSERT_INSERT);
        System.assertEquals('success', AggregatePerformanceReport.deleteAggregateReport(cv.Id), ASSERT_RETURNED_VALUE);
    }
    
    public static testMethod void testAggregateReportStep2CK(){
        List<cadmus_core__Doc_Config__c> docs = new List<cadmus_core__Doc_Config__c>();
        cadmus_core__Doc_Config__c docConfig1 = new cadmus_core__Doc_Config__c();
        docConfig1.cadmus_core__CustomerDocumentConfigId__c = Constants.DOCCONFIG_APD_SCHOOL_STEP2CK_1_YEAR;
        docConfig1.Name = 'Test';
        docs.add(docConfig1);
        cadmus_core__Doc_Config__c docConfig2 = new cadmus_core__Doc_Config__c();
        docConfig2.cadmus_core__CustomerDocumentConfigId__c = Constants.DOCCONFIG_APD_SCHOOL_STEP2CK_5_YEAR;
        docConfig2.Name = 'Test';
        docs.add(docConfig2);
        cadmus_core__Doc_Config__c docConfig3 = new cadmus_core__Doc_Config__c();
        docConfig3.cadmus_core__CustomerDocumentConfigId__c = Constants.DOCCONFIG_APD_COUNTRY_STEP2CK_1_YEAR;
        docConfig3.Name = 'Test';
        docs.add(docConfig3);
        cadmus_core__Doc_Config__c docConfig4 = new cadmus_core__Doc_Config__c();
        docConfig4.cadmus_core__CustomerDocumentConfigId__c = Constants.DOCCONFIG_APD_COUNTRY_STEP2CK_5_YEAR;
        docConfig4.Name = 'Test';
        docs.add(docConfig4);
        INSERT docs;
        System.assert(docs[0].Id != null, ASSERT_INSERT);
        Account acc = new Account();
        acc.Name = 'Test';
        acc.BillingCountry = 'India';
        INSERT acc;
        System.assert(acc.Id != null, ASSERT_INSERT);
        Id schRTId = Schema.SObjectType.Aggregate_Performance_Data__c.getRecordTypeInfosByDeveloperName().get(Constants.APD_RECORD_TYPE_AGGREGAETPD_SCHOOL).getRecordTypeId();
        Aggregate_Performance_Data__c schoolRec = new Aggregate_Performance_Data__c();
        schoolRec.Name = 'FaimerAggregate';
        schoolRec.RecordTypeId = schRTId;
        schoolRec.Data_agg_year__c = '2015';
        schoolRec.School_Name__c = acc.Id;
        schoolRec.Ck_1f_take_count__c = 5;
        schoolRec.Ck_1r_take_count__c = 5;
        INSERT schoolRec;
        System.assert(schoolRec.Id != null, ASSERT_INSERT);
        System.assertEquals(ASSERT_NO_DOC, AggregatePerformanceReport.generateAggregateReport('2015', acc.Id), ASSERT_RETURNED_VALUE);
        schoolRec.Ck_1f_take_count__c = 4;
        schoolRec.Ck_1r_take_count__c = 4;
        schoolRec.Ck_5f_take_count__c = 5;
        schoolRec.Ck_5r_take_count__c = 5;
        UPDATE schoolRec;
        System.assert(schoolRec.Ck_5r_take_count__c == 5, ASSERT_UPDATE);
        System.assertEquals(ASSERT_NO_DOC, AggregatePerformanceReport.generateAggregateReport('2015', acc.Id), ASSERT_RETURNED_VALUE);
        schoolRec.Ck_5f_take_count__c = 4;
        schoolRec.Ck_5r_take_count__c = 4;
        System.assert(schoolRec.Ck_5r_take_count__c == 4, ASSERT_UPDATE);
        UPDATE schoolRec;
        Id ctyRTId = Schema.SObjectType.Aggregate_Performance_Data__c.getRecordTypeInfosByDeveloperName().get(Constants.APD_RECORD_TYPE_AGGREGAETPD_COUNTRY).getRecordTypeId();
        Aggregate_Performance_Data__c cntryRec = new Aggregate_Performance_Data__c();
        cntryRec.Name = 'FaimerAggregate';
        cntryRec.RecordTypeId = ctyRTId;
        cntryRec.Data_agg_year__c = '2015';
        cntryRec.School_Name__c = acc.Id;
        cntryRec.Country_Name__c = 'India';
        cntryRec.Ck_1f_take_count__c = 5;
        cntryRec.Ck_1r_take_count__c = 5;
        INSERT cntryRec;
        System.assert(cntryRec.Id != null, ASSERT_INSERT);
        System.assertEquals(ASSERT_NO_DOC, AggregatePerformanceReport.generateAggregateReport('2015', acc.Id), ASSERT_RETURNED_VALUE);
        cntryRec.Ck_1f_take_count__c = 4;
        cntryRec.Ck_1r_take_count__c = 4;
        cntryRec.Ck_5f_take_count__c = 5;
        cntryRec.Ck_5r_take_count__c = 5;
        UPDATE cntryRec;
        System.assert(cntryRec.Ck_5r_take_count__c == 5, ASSERT_UPDATE);
        System.assertEquals(ASSERT_NO_DOC, AggregatePerformanceReport.generateAggregateReport('2015', acc.Id), ASSERT_RETURNED_VALUE);
        DELETE schoolRec;
        List<Aggregate_Performance_Data__c> aggList = [SELECT Id FROM Aggregate_Performance_Data__c WHERE Id =:schoolRec.Id];
        System.assertEquals(aggList.isEmpty(), true, ASSERT_DELETE);
        System.assertEquals(ASSERT_NO_DOC, AggregatePerformanceReport.generateAggregateReport('2015', acc.Id), ASSERT_RETURNED_VALUE);
    }

    public static testMethod void testAggregateReportStep2CS(){
        List<cadmus_core__Doc_Config__c> docs = new List<cadmus_core__Doc_Config__c>();
        cadmus_core__Doc_Config__c docConfig1 = new cadmus_core__Doc_Config__c();
        docConfig1.cadmus_core__CustomerDocumentConfigId__c = Constants.DOCCONFIG_APD_SCHOOL_STEP2CS_1_YEAR;
        docConfig1.Name = 'Test';
        docs.add(docConfig1);
        cadmus_core__Doc_Config__c docConfig2 = new cadmus_core__Doc_Config__c();
        docConfig2.cadmus_core__CustomerDocumentConfigId__c = Constants.DOCCONFIG_APD_SCHOOL_STEP2CS_5_YEAR;
        docConfig2.Name = 'Test';
        docs.add(docConfig2);
        cadmus_core__Doc_Config__c docConfig3 = new cadmus_core__Doc_Config__c();
        docConfig3.cadmus_core__CustomerDocumentConfigId__c = Constants.DOCCONFIG_APD_COUNTRY_STEP2CS_1_YEAR;
        docConfig3.Name = 'Test';
        docs.add(docConfig3);
        cadmus_core__Doc_Config__c docConfig4 = new cadmus_core__Doc_Config__c();
        docConfig4.cadmus_core__CustomerDocumentConfigId__c = Constants.DOCCONFIG_APD_COUNTRY_STEP2CS_5_YEAR;
        docConfig4.Name = 'Test';
        docs.add(docConfig4);
        INSERT docs;
        System.assert(docs[0].Id != null, ASSERT_INSERT);
        Account acc = new Account();
        acc.Name = 'Test';
        acc.BillingCountry = 'India';
        INSERT acc;
        System.assert(acc.Id != null, ASSERT_INSERT);
        Id schRTId = Schema.SObjectType.Aggregate_Performance_Data__c.getRecordTypeInfosByDeveloperName().get(Constants.APD_RECORD_TYPE_AGGREGAETPD_SCHOOL).getRecordTypeId();
        Aggregate_Performance_Data__c schoolRec = new Aggregate_Performance_Data__c();
        schoolRec.Name = 'FaimerAggregate';
        schoolRec.RecordTypeId = schRTId;
        schoolRec.Data_agg_year__c = '2015';
        schoolRec.School_Name__c = acc.Id;
        schoolRec.Cs_1f_take_count__c = 5;
        schoolRec.Cs_1r_take_count__c = 5;
        INSERT schoolRec;
        System.assert(schoolRec.Id != null, ASSERT_INSERT);
        System.assertEquals(ASSERT_NO_DOC, AggregatePerformanceReport.generateAggregateReport('2015', acc.Id), ASSERT_RETURNED_VALUE);
        schoolRec.Cs_1f_take_count__c = 4;
        schoolRec.Cs_1r_take_count__c = 4;
        schoolRec.Cs_5f_take_count__c = 5;
        schoolRec.Cs_5r_take_count__c = 5;
        UPDATE schoolRec;
        System.assert(schoolRec.Cs_5r_take_count__c == 5, ASSERT_UPDATE);
        System.assertEquals(ASSERT_NO_DOC, AggregatePerformanceReport.generateAggregateReport('2015', acc.Id), ASSERT_RETURNED_VALUE);
        schoolRec.Cs_5f_take_count__c = 4;
        schoolRec.Cs_5r_take_count__c = 4;
        System.assert(schoolRec.Cs_5r_take_count__c == 4, ASSERT_UPDATE);
        UPDATE schoolRec;
        Id ctyRTId = Schema.SObjectType.Aggregate_Performance_Data__c.getRecordTypeInfosByDeveloperName().get(Constants.APD_RECORD_TYPE_AGGREGAETPD_COUNTRY).getRecordTypeId();
        Aggregate_Performance_Data__c cntryRec = new Aggregate_Performance_Data__c();
        cntryRec.Name = 'FaimerAggregate';
        cntryRec.RecordTypeId = ctyRTId;
        cntryRec.Data_agg_year__c = '2015';
        cntryRec.School_Name__c = acc.Id;
        cntryRec.Country_Name__c = 'India';
        cntryRec.Cs_1f_take_count__c = 5;
        cntryRec.Cs_1r_take_count__c = 5;
        INSERT cntryRec;
        System.assert(cntryRec.Id != null, ASSERT_INSERT);
        System.assertEquals(ASSERT_NO_DOC, AggregatePerformanceReport.generateAggregateReport('2015', acc.Id), ASSERT_RETURNED_VALUE);
        cntryRec.Cs_1f_take_count__c = 4;
        cntryRec.Cs_1r_take_count__c = 4;
        cntryRec.Cs_5f_take_count__c = 5;
        cntryRec.Cs_5r_take_count__c = 5;
        UPDATE cntryRec;
        System.assert(cntryRec.Cs_5r_take_count__c == 5, ASSERT_UPDATE);
        System.assertEquals(ASSERT_NO_DOC, AggregatePerformanceReport.generateAggregateReport('2015', acc.Id), ASSERT_RETURNED_VALUE);
        DELETE schoolRec;
        List<Aggregate_Performance_Data__c> aggList = [SELECT Id FROM Aggregate_Performance_Data__c WHERE Id =:schoolRec.Id];
        System.assertEquals(aggList.isEmpty(), true, ASSERT_DELETE);
        System.assertEquals(ASSERT_NO_DOC, AggregatePerformanceReport.generateAggregateReport('2015', acc.Id), ASSERT_RETURNED_VALUE);
    }
}