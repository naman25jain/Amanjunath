@isTest
public class AssetTriggerHelperTest extends ECFMGTestFactory{
    public static final string AZURE_URL = 'https://ecfmglocal001.blob.core.windows.net/sfdc-applicant-documents/0036C00000WQpeaQAD_Postgraduate_Training_Credential_2021-04-30_07_11_18.pdf';
	@isTest static void testAfterUpdateHelper(){
        CurrentEntityIDSequence__c settingsInstance = CurrentEntityIDSequence__c.getOrgDefaults();
        settingsInstance.Entity_ID__c = '0000000';
        upsert settingsInstance;
        System.assert(settingsInstance.Id != null, 'Upsert settingsInstance is not Success');
        CurrentECFMGIDSequence__c settingsInstance1 = CurrentECFMGIDSequence__c.getOrgDefaults();
        settingsInstance1.ECFMG_ID__c = '0000000';
        upsert settingsInstance1;
        System.assert(settingsInstance1.Id != null, 'Upsert settingsInstance1 is not Successful');
        Account acc = (Account)ECFMGTestFactory.make(ECFMGDefaultTestData.DefaultAccountData.class, new Account(Name = 'Test Account'));
        run();
        System.assert(acc.Id != null, 'Assert Success check');
        Contact con = new Contact();
        con.AccountId = acc.Id;
        con.LastName = 'Test';
        con.Email = 'test@test.com';
        INSERT con;
        System.assert(con.Id != null, 'Assert Success checked');
        Asset asst = new Asset();
        asst.Name = 'TCT';
        asst.Status = Constants.ASSET_STATUS_IN_PROGRESS;
        asst.AccountId = acc.Id;
        asst.ContactId = con.Id;
        asst.key__c = Constants.ASSET_TYPE_TCT_DOCUMENT;
        asst.Type__c = 'Translation';
        INSERT asst;
        System.assert(asst.Id != null, 'Assert Success');
        Asset asst1 = new Asset();
        asst1.Name = 'TCT';
        asst1.Status = Constants.ASSET_STATUS_IN_PROGRESS;
        asst1.AccountId = acc.Id;
        asst1.ContactId = con.Id;
        asst1.ParentId = asst.Id;
        asst1.Type__c = 'Translation';
        INSERT asst1;
        System.assert(asst1.Id != null, 'Assert Success');
        asst.Status = Constants.ASSET_STATUS_REJECTED;
        UPDATE asst;
        System.assertEquals([SELECT Status FROM Asset WHERE Id =:asst1.Id][0].Status, Constants.ASSET_STATUS_REJECTED, 'Assert success');
    }
    @isTest static void testUpdateInternalAssets(){
        CurrentEntityIDSequence__c settingsInstance = CurrentEntityIDSequence__c.getOrgDefaults();
        settingsInstance.Entity_ID__c = '0000000';
        upsert settingsInstance;
        CurrentECFMGIDSequence__c settingsInstance1 = CurrentECFMGIDSequence__c.getOrgDefaults();
        settingsInstance1.ECFMG_ID__c = '0000000';
        upsert settingsInstance1;
        System.assert(settingsInstance.Id != null, 'Upsert settingsInstance not Success');
        System.assert(settingsInstance1.Id != null, 'Upsert settingsInstance1 not Success');
        Account acc = (Account)ECFMGTestFactory.make(ECFMGDefaultTestData.DefaultAccountData.class, new Account(Name = 'Test Account1'));
        run();
        System.assert(acc.Id != null, 'Account creation is not Successful');
        Contact con = new Contact();
        con.AccountId = acc.Id;
        con.LastName = 'Test';
        con.Email = 'test1@test.com';
        INSERT con;
        System.assert(con.Id != null, 'Contact creation is not Successful');
        Id appForCertRTId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_IDENTITY_VERIFICATION).getRecordTypeId();
        Id appForCertRTId1 = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_APP_FOR_CERT).getRecordTypeId();
        List<Case> caseRecordList = new List<Case>();
        Case caseRecord = new Case();
        caseRecord.Internal_Status__c = Constant_Case__mdt.getInstance('STATUS_NEW').Value__c;
        caseRecord.AccountId = acc.Id;
        caseRecord.ContactId = con.Id;
        caseRecord.RecordTypeId = appForCertRTId;
        caseRecordList.add(caseRecord);
        Case caseRecord1 = new Case();
        caseRecord1.Internal_Status__c = Constants.CASE_STATUS_PENDING_SUBMISSION;
        caseRecord1.AccountId = acc.Id;
        caseRecord1.ContactId = con.Id;
        caseRecord1.RecordTypeId = appForCertRTId1;
        caseRecordList.add(caseRecord1);
        INSERT caseRecordList;
        System.assert(caseRecord.Id != null, 'Case creation is not Successful');
        Id recordTypeId = Schema.SObjectType.Contact_Association_Type_Staging__c.getRecordTypeInfosByDeveloperName().get('Degree_Medical_School').getRecordTypeId();
        Contact_Association_Type_Staging__c cats = new Contact_Association_Type_Staging__c();
        cats.recordTypeId = recordTypeId;
        cats.Account__c = con.AccountId;
        cats.Case__c = caseRecord.Id;
        cats.Contact__c = con.Id;
        cats.Type__c = Constants.CONASCTYPE_TYPE_DEGREE_SCHOOL;
        insert cats;
        System.assert(cats.Id != null, 'Contact association type staging creation is not Successful');
        Asset assetRecord = new Asset();
        assetRecord.Name = Constant_Asset__mdt.getInstance('TYPE_SCHEDULING_PERMIT').Value__c;
        assetRecord.ContactId = caseRecord.contactId;
        assetRecord.Case__c = caseRecord.Id;
        assetRecord.Status = Constant_Asset__mdt.getInstance('STATUS_IN_PROGRESS').Value__c;
        assetRecord.type__c = Constant_Asset__mdt.getInstance('TYPE_SCHEDULING_PERMIT').Value__c;
        assetRecord.recordTypeId = GenericUtilities.getRecordTypeIdByDevName('Asset',Constant_Asset__mdt.getInstance('RECORD_TYPE_EXAM_REG').Value__c);
        ECFMGTestFactory.make(ECFMGDefaultTestData.DefaultAssestTestData.class, assetRecord);
        run();
        List<Asset> asstList = new List<Asset>();
        Asset asst = new Asset();
        asst.Name = 'TCT';
        asst.Status = Constants.ASSET_STATUS_ACCEPTED;
        asst.AccountId = acc.Id;
        asst.ContactId = con.Id;
        asst.key__c = Constants.ASSET_TYPE_TCT_DOCUMENT;
        asst.Type__c = Constants.ASSET_TYPE_TRANSLATION;
        asst.Case__c = caseRecord.Id;
        asstList.add(asst);
        Asset asst4 = new Asset();
        asst4.Name = 'ID Form Notarized';
        asst4.Status = Constants.ASSET_STATUS_IN_PROGRESS;
        asst4.AccountId = acc.Id;
        asst4.ContactId = con.Id;
        asst4.Type__c = Constants.ASSET_TYPE_IDENTITY_VERIFICATION;
        asst4.Case__c = caseRecord.Id;
        asstList.add(asst4);
        Asset asst5 = new Asset();
        asst5.Name = 'Redacted ID Form';
        asst5.Status = Constants.ASSET_STATUS_IN_PROGRESS;
        asst5.AccountId = acc.Id;
        asst5.ContactId = con.Id;
        asst5.Type__c = Constants.ASSET_TYPE_IDENTITY_VERIFICATION;
        asst5.Case__c = caseRecord.Id;
        asstList.add(asst5);
        Asset asst2 = new Asset();
        asst2.Name = Constants.ASSET_TYPE_SIGNED_SERVICE_FORM;
        asst2.Status = Constants.ASSET_STATUS_VERIFIED;
        asst2.AccountId = acc.Id;
        asst2.ContactId = con.Id;
        asst2.key__c = Constants.ASSET_TYPE_TCT_DOCUMENT;
        asst2.Type__c = Constants.ASSET_TYPE_SIGNED_SERVICE_FORM;
        asst2.Case__c = caseRecord.Id;
        asstList.add(asst2);
        Asset asst3 = new Asset();
        asst3.Name = 'TCT';
        asst3.Status = Constants.ASSET_STATUS_ACCEPTED;
        asst3.AccountId = acc.Id;
        asst3.ContactId = con.Id;
        asst3.key__c = Constants.ASSET_TYPE_TCT_DOCUMENT;
        asst3.Type__c = Constants.ASSET_TYPE_TRANSLATION;
        asst3.Case__c = caseRecord1.Id;
        asstList.add(asst3);
        Asset asst6 = new Asset();
        asst6.Name = Constants.ASSET_NAME_DEAN_LETTER;
        asst6.Status = Constants.ASSET_STATUS_IN_PROGRESS;
        asst6.AccountId = acc.Id;
        asst6.ContactId = con.Id;
        asst6.Type__c = Constants.ASSET_TYPE_DEAN_LETTER;
        asst6.Case__c = caseRecord1.Id;
        asst6.Contact_Association_Type_Staging__c = cats.Id;
        asstList.add(asst6);
        Asset asst7 = new Asset();
        asst7.Name = Constants.ASSET_TYPE_NAME_DOC;
        asst7.Status = Constants.ASSET_STATUS_IN_PROGRESS;
        asst7.AccountId = acc.Id;
        asst7.ContactId = con.Id;
        asst7.Contact_Association_Type_Staging__c = cats.Id;
        asst7.Type__c = Constants.ASSET_TYPE_NAME_DOC;
        asst7.Case__c = caseRecord1.Id;
        asstList.add(asst7);
        Asset asst8 = new Asset();
        asst8.Name = Constants.ASSET_TYPE_NAME_DOC;
        asst8.Status = Constants.ASSET_STATUS_IN_PROGRESS;
        asst8.AccountId = acc.Id;
        asst8.ContactId = con.Id;
        asst8.Contact_Association_Type_Staging__c = cats.Id;
        asst8.Type__c = Constants.ASSET_TYPE_NAME_DOC;
        asst8.Case__c = caseRecord1.Id;
        asstList.add(asst8);
        List<Asset> updateAsstList = new List<Asset>();
        INSERT asstList;
        System.assert(asst.Id != null, 'Asset creation is not Successful');
        asst7.ParentId = asst6.Id;
        asst8.ParentId = asst6.Id;
        updateAsstList.add(asst7);
        updateAsstList.add(asst8);
        update updateAsstList;
        System.assert(asst7.parentId == asst6.Id, 'Asset parentId not updated here');
        List<Asset> updateAsstList1 = new List<Asset>();
        asst4.status = Constants.ASSET_STATUS_ACCEPTED;
        updateAsstList1.add(asst4);
        asst6.status = Constants.ASSET_STATUS_ACCEPTED;
        updateAsstList1.add(asst6);
        asst8.status = Constants.ASSET_STATUS_ACCEPTED;
        updateAsstList1.add(asst8);
        update updateAsstList1;
        System.assert(asst8.Status == Constants.ASSET_STATUS_ACCEPTED, 'Asset status not updated here');
        Service__c ser = new Service__c();
        ser.Name = Constants.SERVICE_NAME_PERFORMANCE_DATA;
        INSERT ser;
        System.assert(ser.Id != null, 'Service creation is not Successful');
        Case2Service__c case2Serv = new Case2Service__c();
        case2Serv.Case__c = caseRecord.Id;
        case2Serv.Service__c = ser.Id;
        INSERT case2Serv;
        System.assert(case2Serv.Id != null, 'case2Serv creation is not Successful');
        Test.startTest();
            asst.Status = Constants.ASSET_STATUS_IN_PROGRESS;
            UPDATE asst;
        	System.assert(asst.Status == Constants.ASSET_STATUS_IN_PROGRESS, 'Asset status not updated here also');
        	asst3.Status = Constants.ASSET_STATUS_IN_PROGRESS;
        	asst3.Contact_Association_Type_Staging__c =  cats.Id;
        	UPDATE asst3;
        	System.assert(asst3.Status == Constants.ASSET_STATUS_IN_PROGRESS, 'Asset status not updated here');
            Asset asst1 = new Asset();
            asst1.Name = Constants.ASSET_TYPE_SIGNED_SERVICE_FORM;
            asst1.Status = Constants.ASSET_STATUS_IN_PROGRESS;
            asst1.AccountId = acc.Id;
            asst1.ContactId = con.Id;
            asst1.key__c = Constants.ASSET_TYPE_TCT_DOCUMENT;
            asst1.Type__c = Constants.ASSET_TYPE_SIGNED_SERVICE_FORM;
            asst1.Case__c = caseRecord.Id;
            INSERT asst1;
        	System.assert(asst1.Status != null, 'Asset created is not Successful');
            asst2.Status = Constants.ASSET_STATUS_IN_PROGRESS;
            UPDATE asst2;
        	System.assert(asst2.Status == Constants.ASSET_STATUS_IN_PROGRESS, 'Asset status not updated');
        Test.stopTest();
    }
    @isTest static void testUpateCaseSignedPIARefactor(){
        CurrentEntityIDSequence__c settingsInstance = CurrentEntityIDSequence__c.getOrgDefaults();
        settingsInstance.Entity_ID__c = '0000000';
        upsert settingsInstance;
        CurrentECFMGIDSequence__c settingsInstance1 = CurrentECFMGIDSequence__c.getOrgDefaults();
        settingsInstance1.ECFMG_ID__c = '0000000';
        upsert settingsInstance1;
        System.assert(settingsInstance.Id != null, 'Upsert settingsInstance not Success');
        System.assert(settingsInstance1.Id != null, 'Upsert settingsInstance1 not Success');
        Account acc = (Account)ECFMGTestFactory.make(ECFMGDefaultTestData.DefaultAccountData.class, new Account(Name = 'Test Account1'));
        run();
        System.assert(acc.Id != null, 'Account creation is not Successful');
        Contact con = new Contact();
        con.AccountId = acc.Id;
        con.LastName = 'Test';
        con.Email = 'test2@test.com';
        INSERT con;
        System.assert(con.Id != null, 'Contact creation is not Successful');
        Id appForCertRTId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_IDENTITY_VERIFICATION).getRecordTypeId();
        List<Case> caseRecordList = new List<Case>();
        Case caseRecord = new Case();
        caseRecord.Internal_Status__c = Constant_Case__mdt.getInstance('STATUS_NEW').Value__c;
        caseRecord.AccountId = acc.Id;
        caseRecord.ContactId = con.Id;
        caseRecord.RecordTypeId = appForCertRTId;
        caseRecordList.add(caseRecord);
        INSERT caseRecordList;
        System.assert(caseRecord.Id != null, 'Case1 creation is not Successful');
        Id recordTypeId = Schema.SObjectType.Contact_Association_Type_Staging__c.getRecordTypeInfosByDeveloperName().get(Constants.CONASCTYPESTG_RECORD_TYPE_DEGREE_MED_SCHOOL).getRecordTypeId();
        Contact_Association_Type_Staging__c cats = new Contact_Association_Type_Staging__c();
        cats.recordTypeId = recordTypeId;
        cats.Account__c = con.AccountId;
        cats.Case__c = caseRecord.Id;
        cats.Contact__c = con.Id;
        cats.Type__c = Constants.CONASCTYPE_TYPE_DEGREE_SCHOOL;
        insert cats;
        System.assert(cats.Id != null, 'Cats1 creation is not Successful');
        List<Asset> asstList = new List<Asset>();
        Asset asst = new Asset();
        asst.Name = 'TCT';
        asst.Status = Constants.ASSET_STATUS_IN_PROGRESS;
        asst.AccountId = acc.Id;
        asst.ContactId = con.Id;
        asst.key__c = Constants.ASSET_TYPE_SIGNED_PIA;
        asst.Type__c = Constants.ASSET_TYPE_SIGNED_PIA;
        asst.Case__c = caseRecord.Id;
        asstList.add(asst);
        Asset2Verification__c newAsset2Ver = new Asset2Verification__c();
        newAsset2Ver.Azure_Document_URL__c = AZURE_URL;
        INSERT newAsset2Ver;
        Id assetRecordTypeId = Schema.SObjectType.Asset.getRecordTypeInfosByDeveloperName().get('Verification').getRecordTypeId();
        Asset asstNew = new Asset();
        asstNew.RecordTypeId = assetRecordTypeId;
        asstNew.Name = Constants.ASSET2VER_DOCTYPE_ACC_VER_FORM;
        asstNew.Status = Constants.ASSET_STATUS_NEW;
        asstNew.ContactId = con.Id;
        asstNew.Type__c = 'Online Verification';
        asstNew.Case__c = caseRecord.Id;
        asstNew.Azure_Storage_URL__c = AZURE_URL;
        asstList.add(asstNew);
        INSERT asstList;
        System.assert(asstList[1].Id != null, 'asstNew creation is not Successful');
        System.assert(newAsset2Ver.Asset__c != asstNew.Id, 'Asset is not updated in asset2verification');
        System.assert(asst.Id != null, 'Asset1 creation is not Successful');
    }
    @isTest static void testUpdateCaseDocumentURL(){
        Account acc = (Account)ECFMGTestFactory.make(ECFMGDefaultTestData.DefaultAccountData.class, new Account(Name = 'Test Account 1'));
        run();
        System.assert(acc.Id != null, 'Account 1 creation is not Successful');
        Contact con = new Contact();
        con.AccountId = acc.Id;
        con.LastName = 'Test 1';
        con.Email = 'test2@test1.com';
        INSERT con;
        System.assert(con.Id != null, 'Contact 1 creation is not Successful');
        Id appForCertRTId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_CREDENTIAL_VERIFICATION).getRecordTypeId();
        List<Case> caseRecordList = new List<Case>();
        Case caseRecord = new Case();
        caseRecord.Internal_Status__c = Constants.CASE_STATUS_PENDING_SUBMISSION;
        caseRecord.AccountId = acc.Id;
        caseRecord.ContactId = con.Id;
        caseRecord.RecordTypeId = appForCertRTId;
        caseRecord.Document_URL__c = '';
        caseRecordList.add(caseRecord);
        INSERT caseRecordList;
        System.assert(caseRecord.Id != null, 'Case1 creation is not Successful');
        Id assetRTId = Schema.SObjectType.Asset.getRecordTypeInfosByDeveloperName().get(Constants.ASSET_RECORD_TYPE_VERIFICATION).getRecordTypeId();
        Asset asst = new Asset();
        asst.Name = Constants.ASSET_TYPE_RETURNED_VERIFICATION_FORM;
        asst.Status = Constants.ASSET_STATUS_NEW;
        asst.AccountId = acc.Id;
        asst.ContactId = con.Id;
        asst.Type__c = Constants.ASSET_TYPE_VERIFICATION_FORM;
        asst.Case__c = caseRecord.Id;
        asst.RecordTypeId = assetRTId;
        asst.Azure_Storage_URL__c = AZURE_URL;
        INSERT asst;
        System.assert(asst.Id != null, 'This asset creation is not Successful');     
        Case caseObj = new Case();
        caseObj.Id = caseRecord.Id;
        caseObj.Document_URL__c = asst.Azure_Storage_URL__c;
        update caseObj;
        System.assert(caseObj.Id != null, 'This Case is not updated successful'); 
    }
    @isTest static void testUpdateParentAsset(){
        Id conRecordTypeId = GenericUtilities.getRecordTypeIdByDevName('Contact',Constants.CONTACT_RECORD_TYPE_APPLICANT);
        Id caseRecTypeId = GenericUtilities.getRecordTypeIdByDevName('Case',Constant_Case__mdt.getInstance('REC_TYPE_ERAS').Value__c);
        Account acc = (Account)ECFMGTestFactory.make(ECFMGDefaultTestData.DefaultAccountData.class, new Account(Name='Account Test'));
        Contact con = (Contact)ECFMGTestFactory.make(ECFMGDefaultTestData.DefaultContactData.class, new Contact(FirstName='Test', LastName='Contacts', USMLE_ID__c='1234', RecordTypeId=conRecordTypeId, Account = acc));
        Case cse = (Case)ECFMGTestFactory.make(ECFMGDefaultTestData.DefaultCaseData.class, new Case(Contact = con, RecordTypeId = caseRecTypeId, Internal_Status__c = Constant_Case__mdt.getInstance('STATUS_NEW').Value__c, OwnerId = Constants.QUEUE_DEV_ID_MAP.get(Constant_Case__mdt.getInstance('QUEUE_ERAS').Value__c)));
        run();
        Test.startTest();
        Asset asst1 = (Asset)ECFMGTestFactory.make(ECFMGDefaultTestData.DefaultAssetData.class, new Asset(ContactId = con.Id, Case__c = cse.Id, Azure_Storage_URL__c ='test1.pdf'));
        run();
        Asset asst2 = (Asset)ECFMGTestFactory.make(ECFMGDefaultTestData.DefaultAssetData.class, new Asset(ContactId = con.Id, Case__c = cse.Id, Azure_Storage_URL__c ='test2.pdf', Parent_Azure_Storage_URL__c = 'test1.pdf'));
        run();
        Asset updatedasst2 = [SELECT Id, ParentId FROM Asset WHERE Id =: asst2.Id];
        System.assertEquals(asst1.Id, updatedasst2.ParentId, 'Parent not linked to child asset asst2');
        Asset asst3 = (Asset)ECFMGTestFactory.make(ECFMGDefaultTestData.DefaultAssetData.class, new Asset(ContactId = con.Id, Case__c = cse.Id, Azure_Storage_URL__c ='test3.pdf', Parent_Azure_Storage_URL__c = 'test4.pdf'));
        run();
        Asset asst4 = (Asset)ECFMGTestFactory.make(ECFMGDefaultTestData.DefaultAssetData.class, new Asset(ContactId = con.Id, Case__c = cse.Id, Azure_Storage_URL__c ='test4.pdf'));
        run();
        Asset updatedasst3 = [SELECT Id, ParentId FROM Asset WHERE Id =: asst3.Id];
        System.assertEquals(asst4.Id, updatedasst3.ParentId, 'Parent not linked to child asst3');
        run();
        Test.stopTest();
    }
}