@isTest
public with sharing class ComplieVerificationPacketControllerTest{
    static final String CASE_NOT_UPDATED = 'Case not updated';
    static final String ALL_ASST_NOT_RETURNED = 'All assets not returned';
    static final String CONTACT_NOT_CREATED = 'Contact is not created';
    static final String UPSERT_SETT_INST_NOT_SUCC = 'Upsert settingsInstance1 is not Successful';
    static final String ACCT_NOT_CREATED = 'Account is not created';
    static final String CASE_NOT_INSERTED = 'Case is not inserted';
    static final String VER_PACK_NOT_INSERTED = 'verPackNew is not inserted';
    static final String TEST_ACCT = 'Test Account';
    @isTest
    public static void checkTheFinalDocTest(){
        CurrentECFMGIDSequence__c settingsInstance1 = CurrentECFMGIDSequence__c.getOrgDefaults();
        settingsInstance1.ECFMG_ID__c = '0000000';
        upsert settingsInstance1;
        System.assert(settingsInstance1.Id != null, UPSERT_SETT_INST_NOT_SUCC);
        Contact newContactId = new Contact();
        newContactId.FirstName='Test';
        newContactId.LastName='Test';
        insert newContactId;     
        System.Assert(newContactId.Id!= null, CONTACT_NOT_CREATED);
        Id appForCertRTId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_CREDENTIAL_VERIFICATION).getRecordTypeId();
        Case caseRecord = new Case();
        caseRecord.Internal_Status__c = Constants.CASE_STATUS_SUBMITTED_IN_REVIEW;
        caseRecord.RecordTypeId = appForCertRTId;
        INSERT caseRecord;
        system.assert(caseRecord.Id != null,CASE_NOT_INSERTED);
        Verification_Packet__c verPackNew = new Verification_Packet__c();
        verPackNew.Case__c = caseRecord.Id;
        verPackNew.Is_Active__c = true;
        INSERT verPackNew;
        string verPackBackUp = verPackNew.Id;
        system.assert(verPackNew.Id != null, VER_PACK_NOT_INSERTED);
        Asset2Verification__c eachAsset2Ver1 = new Asset2Verification__c();
        eachAsset2Ver1.Verification_Packet__c = verPackNew.Id;
        eachAsset2Ver1.Document_Type__c = constants.ASSET2VER_DOCTYPE_ACC_VER_FORM;
        INSERT eachAsset2Ver1;
        system.assert(eachAsset2Ver1.Id != null,'eachAsset2Ver2 is not inserted');
        Test.startTest();
        System.assertEquals(ComplieVerificationPacketController.checkTheFinalDoc(String.valueof(caseRecord.Id)),false,'Validation is not shown');
        Asset2Verification__c eachAsset2Ver2 = new Asset2Verification__c();
        eachAsset2Ver2.Verification_Packet__c = verPackNew.Id;
        eachAsset2Ver2.Document_Type__c = constants.ASSET2VER_DOCTYPE_COVER_LETTER;
        INSERT eachAsset2Ver2;
        system.assert(eachAsset2Ver2.Id != null,'eachAsset2Ver2 is not inserted');
        System.assertEquals(ComplieVerificationPacketController.checkTheFinalDoc(String.valueof(caseRecord.Id)),true,'Validation is shown for positive scenario');
        DELETE verPackNew;
        system.assert([SELECT Id FROM Verification_Packet__c where Id =:verPackBackUp].size()==0,'verPackNew is not deleted');
        Asset newAsset = new Asset();
        newAsset.Case__c = caseRecord.Id;
        newAsset.uploaded_by_applicant__c = True;
        newAsset.Name = 'Verification';
        newAsset.ContactId = newContactId.Id;
        INSERT newAsset;
        system.assert(newAsset.Id != null,'newAsset is not inserted');
        ComplieVerificationPacketController.createVpandAsset2VerRecords(String.valueof(caseRecord.Id));
        System.assertEquals([SELECT id FROM Asset2Verification__c WHERE Asset__c = :newAsset.Id].size(),2,'No records created');
        Test.stopTest();
    }
    @istest
    public static void testCompileVerificationPacket(){
        CurrentEntityIDSequence__c settingsInstance = CurrentEntityIDSequence__c.getOrgDefaults();
        settingsInstance.Entity_ID__c = '0000000';
        upsert settingsInstance;
        System.assert(settingsInstance.Id != null, UPSERT_SETT_INST_NOT_SUCC);
        CurrentECFMGIDSequence__c settingsInstance1 = CurrentECFMGIDSequence__c.getOrgDefaults();
        settingsInstance1.ECFMG_ID__c = '0000000';
        upsert settingsInstance1;
        System.assert(settingsInstance1.Id != null, UPSERT_SETT_INST_NOT_SUCC);
        cadmus_core__Doc_Config__c docConfig = new cadmus_core__Doc_Config__c();
        docConfig.Name = 'Verification Cover Letter - English';
        docConfig.cadmus_core__CustomerDocumentConfigId__c = '74da494d-11fc-444c-8192-78e729c415e8';
        INSERT docConfig;
        System.assert(docConfig.Id != null, 'docConfig creation is not Successful');
        cadmus_core__Doc_Config__c docConfig2 = new cadmus_core__Doc_Config__c();
        docConfig2.Name = 'Universal Verification Form - English';
        docConfig2.cadmus_core__CustomerDocumentConfigId__c = 'f373d0f0-bfd2-4864-b946-3f7a8a07fa01';
        INSERT docConfig2;
        System.assert(docConfig2.Id != null, 'docConfig2 creation is not Successful');
        Id entityAcctRTId = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get(Constants.ACCOUNT_RECORD_TYPE_DEV_ENTITY).getRecordTypeId();
        Account acc = new Account();
        acc.Name = TEST_ACCT;
        acc.RecordTypeId = entityAcctRTId;
        acc.BillingCountry = 'India';
        INSERT acc;
        System.assert(acc.Id != null, ACCT_NOT_CREATED);
        Contact con = new Contact();
        con.FirstName = 'Test';
        con.LastName = 'Test';
        con.AccountId = acc.Id;
        INSERT con;     
        System.Assert(con.Id!= null, CONTACT_NOT_CREATED);
        Id cvRTId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_CREDENTIAL_VERIFICATION).getRecordTypeId();
        Id assetRecTypeVerification = Schema.SObjectType.Asset.getRecordTypeInfosByDeveloperName().get(Constants.ASSET_RECORD_TYPE_VERIFICATION).getRecordTypeId();
        Case caseRecord = new Case();
        caseRecord.Entity__c = acc.Id;
        caseRecord.ContactId = con.Id;
        caseRecord.RecordTypeId = cvRTId;
        caseRecord.Alternate_Entity__c = acc.Id;
        INSERT caseRecord;
        system.assert(caseRecord.Id != null, CASE_NOT_INSERTED);
        Affirmation__c affr = new Affirmation__c();
        affr.Verify_with_Alternate_Entity__c = true;
        affr.Case__c = caseRecord.Id;
        INSERT affr;
        system.assert(affr.Id != null, 'affr is not inserted');
        List<Asset> testAssets = new List<Asset>();
        Asset asst = new Asset();
        asst.Name = Constants.ASSET_NAME_CREDENTIAL_REQUEST;
        asst.AccountId = acc.Id;
        asst.ContactId = con.Id;
        asst.Case__c = caseRecord.Id;
        testAssets.add(asst);
        Asset asst1 = new Asset();
        asst1.Type__c = Constants.ASSET_TYPE_TRANSLATION;
        asst1.Name = Constants.ASSET_TYPE_TRANSLATION;
        asst1.AccountId = acc.Id;
        asst1.ContactId = con.Id;
        asst1.Case__c = caseRecord.Id;
        testAssets.add(asst1);
        Asset asst2 = new Asset();
        asst2.Type__c = Constants.ASSET_TYPE_ONLINE_VERIFICATION;
        asst2.Name = Constants.ASSET_TYPE_ONLINE_VERIFICATION;
        asst2.AccountId = acc.Id;
        asst2.ContactId = con.Id;
        asst2.Case__c = caseRecord.Id;
        asst2.RecordTypeId = assetRecTypeVerification;
        testAssets.add(asst2);
        Asset asst3 = new Asset();
        asst3.Type__c = Constants.ASSET_TYPE_SUPPORTING_DOCUMENTS;
        asst3.Status = Constants.ASSET_STATUS_NEW;
        asst3.Name = Constants.ASSET_NAME_SUPPORTING_DOCUMENTS;
        asst3.AccountId = acc.Id;
        asst3.ContactId = con.Id;
        asst3.Case__c = caseRecord.Id;
        asst3.RecordTypeId = GenericUtilities.getRecordTypeIdByDevName('Asset', Constants.ASSET_RECORD_TYPE_SUPP_DOCUMENT);
        testAssets.add(asst3);
        INSERT testAssets;
        System.assert(asst1.Id != null, 'Asset creation failed');
        Id catsRecTypeId = Schema.SObjectType.Contact_Association_Type_Staging__c.getRecordTypeInfosByDeveloperName().get(Constants.CONASCTYPESTG_RECORD_TYPE_CREDENTIAL_INTAKE).getRecordTypeId();
        Contact_Association_Type_Staging__c cats = new Contact_Association_Type_Staging__c();
        cats.Case__c = caseRecord.Id;
        cats.Requested_to_be_sent_to_ECFMG__c = true;
        cats.Contact__c = con.Id;
        cats.Account__c = acc.Id;
        cats.Credential_Type__c = 'Certificate of Good Standing';
        cats.RecordTypeId = catsRecTypeId;
        INSERT cats;
        system.assert(cats.Id != null,'cats is not inserted');
        Affirmation__c affirmation = new Affirmation__c();
        affirmation.RecordTypeId = GenericUtilities.getRecordTypeIdByDevName('Affirmation__c',Constants.AFFIRMATION_RECORD_TYPE_CREDENTIAL_VERIFICATION);
        affirmation.Case__c = caseRecord.Id;
        INSERT affirmation;
        System.assert(affirmation.Id != null, 'Affirmation creation failed');
        Test.startTest();
            String caseRecordTypeDevName = ComplieVerificationPacketController.getCaseRecTypeDevName(caseRecord.Id);
            System.assertEquals(ComplieVerificationPacketController.getCaseEntity(caseRecord.Id, caseRecordTypeDevName), TEST_ACCT, 'Entity is not returned');
            affirmation.Verify_with_Alternate_Entity__c = true;
            UPDATE affirmation;
            System.assert(affirmation.Id != null, 'Affirmation update failed');
            System.assertEquals(ComplieVerificationPacketController.getCaseEntity(caseRecord.Id, caseRecordTypeDevName), TEST_ACCT, 'Entity is not returned');
            Contact_Association_Type_Staging__c catsObj = ComplieVerificationPacketController.getCATSCredentialIntake(caseRecord.Id);
            System.assertEquals(cats.Id, catsObj.Id, 'CATS record is not retrieved');
            System.assert(ComplieVerificationPacketController.createVerificationPacket(caseRecord.Id, '{"sendLang":"English","reqEntity":"false","inclTrans":"true","addInfo":"Test"}') == True, 'Verification packet not created');
            caseRecord.Is_Reopened_Exam_Reg__c = true;
            UPDATE caseRecord;
            System.assert(caseRecord.Id != null, 'Updation failed');
            System.assert(ComplieVerificationPacketController.createVerificationPacket(caseRecord.Id, '{"sendLang":"English","reqEntity":"false","inclTrans":"true","addInfo":"Test"}') == True, 'Verification packet not created');
            System.assert(ComplieVerificationPacketController.createVerificationPacket(caseRecord.Id, '{"sendLang":"English","reqEntity":"false","inclTrans":"true","addInfo":"Test2"}') == True, 'Verification packet not updated');
            System.assert(ComplieVerificationPacketController.createVerificationPacket(caseRecord.Id, '{"sendLang":"English","reqEntity":"true","inclTrans":"false","addInfo":"Test"}') == True, 'Verification packet not updated');
        Test.stopTest();
    }
    @isTest
    public static void updateCredVerCaseTest(){
        CurrentECFMGIDSequence__c settingsInstance1 = CurrentECFMGIDSequence__c.getOrgDefaults();
        settingsInstance1.ECFMG_ID__c = '0000000';
        upsert settingsInstance1;
        System.assert(settingsInstance1.Id != null, 'Upsert settingsInstance is not Successful');
        CurrentEntityIDSequence__c curEntitySetting = CurrentEntityIDSequence__c.getOrgDefaults();
        curEntitySetting.Entity_ID__c = '0000000';
        upsert curEntitySetting;
        System.assert(curEntitySetting.Id != null, 'Upsert settingsInstance is not Successful');
        Account acc = new Account();
        acc.Name = 'Test Account2';
        acc.External_Instructions__c = 'test';
        acc.BillingCountry = 'India';
        INSERT acc;
        System.assert(acc.Id != null, ACCT_NOT_CREATED);
        Contact newContact = new Contact();
        newContact.FirstName='Test';
        newContact.LastName='Test';
        newContact.AccountId = acc.Id;
        newContact.Email = 'test1@test.com';
        insert newContact;     
        System.Assert(newContact.Id!= null,'Contact not created');
        Id credVerRTId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_CREDENTIAL_VERIFICATION).getRecordTypeId();
        Case caseRecord = new Case();
        caseRecord.Internal_Status__c = Constants.CASE_STATUS_SUBMITTED_IN_REVIEW;
        caseRecord.RecordTypeId = credVerRTId;
        caseRecord.Send_Method__c = Constants.CASE_SEND_METHOD_PAPER;
        caseRecord.Entity__c = acc.Id;
        caseRecord.ContactId = newContact.Id;
        caseRecord.Service__c = Constants.CASE_SERVICE_EPIC;
        caseRecord.Alternate_Entity__c = acc.Id;
        INSERT caseRecord;
        system.assert(caseRecord.Id != null,'caseRecord is not inserted');
        Contact_Association_Type_Staging__c cats = new Contact_Association_Type_Staging__c();
        cats.Case__c = caseRecord.Id;
        cats.Courier_service_for_an_additional_fee__c = true;
        cats.Contact__c = newContact.Id;
        cats.Account__c = acc.Id;
        INSERT cats;
        system.assert(cats.Id != null,'cats is not inserted');
        Affirmation__c affr = new Affirmation__c();
        affr.Case__c = caseRecord.Id;
        affr.Verify_with_Alternate_Entity__c = true;
        affr.RecordTypeId = GenericUtilities.getRecordTypeIdByDevName('Affirmation__c',Constants.AFFIRMATION_RECORD_TYPE_CREDENTIAL_VERIFICATION);
        INSERT affr;
        system.assert(affr.Id != null,'affr is not inserted');
        Verification_Packet__c verPackNew = new Verification_Packet__c();
        verPackNew.Case__c = caseRecord.Id;
        verPackNew.Is_Active__c = true;
        INSERT verPackNew;
        string verPackBackUp = verPackNew.Id;
        system.assert(verPackNew.Id != null, VER_PACK_NOT_INSERTED);
        Asset2Verification__c eachAsset2Ver1 = new Asset2Verification__c();
        eachAsset2Ver1.Verification_Packet__c = verPackNew.Id;
        eachAsset2Ver1.Document_Type__c = constants.ASSET2VER_DOCTYPE_ACC_VER_FORM;
        INSERT eachAsset2Ver1;
        system.assert(eachAsset2Ver1.Id != null,'eachAsset2Ver is not inserted');
        Test.startTest();
        Map<String, Object> sendReqJsonMap = new Map<String, Object>();
        sendReqJsonMap.put('reqSentViaCour', true);
        sendReqJsonMap.put('courFeePayableBy', 'Applicant');
        sendReqJsonMap.put('courAccount', '123');
        String sendReqJson = JSON.serialize(sendReqJsonMap);
        Boolean courierSelected = ComplieVerificationPacketController.getCourierSelectedByApplicant(String.valueof(caseRecord.Id));
        System.assertEquals(true, courierSelected, 'Courier Selected is false');
        List<String> picklistValues = ComplieVerificationPacketController.getCourierFeePicklistValues();
        System.assertEquals(3, picklistValues.size(), 'picklist values list size is not 3');
        Verification_Packet__c vp = ComplieVerificationPacketController.getVerificationPacket(String.valueof(caseRecord.Id));
        System.assertEquals(verPackBackUp, vp.Id, 'verification packet not retrieved');
        ComplieVerificationPacketController.updateCredVerCase(String.valueof(caseRecord.Id), sendReqJson);
        Case cse = [SELECT id, Internal_Status__c FROM Case WHERE Id =:caseRecord.Id];
        System.assertEquals(Constants.CASE_STATUS_PENDING_ADDRESS_REVIEW, cse.Internal_Status__c, 'Case status not Pending Address Review');
        caseRecord.Send_Method__c = Constants.CASE_SEND_METHOD_EMAIL;
        caseRecord.Send_Method_Override_Comments__c = 'test';
        caseRecord.List_of_emails__c = 'test1@test.com';
        UPDATE caseRecord;
        system.assert(caseRecord.Id != null,'caseRecord not updated');
        Verification_Packet__c vp1 = new Verification_Packet__c();
        vp1.Case__c = caseRecord.Id;
        vp1.Is_Active__c = true;
        INSERT vp1;
        ComplieVerificationPacketController.updateCredVerCase(caseRecord.Id, sendReqJson);
        Case cse2 = [SELECT id, Internal_Status__c FROM Case WHERE Id =:caseRecord.Id];
        System.assertEquals(Constants.CASE_STATUS_PENDING_EMAIL_CREATION, cse2.Internal_Status__c, 'Case status not Pending email creation');
        caseRecord.Service__c = 'EICS';
        UPDATE caseRecord;
        system.assert(caseRecord.Id != null,'caseRecord not updated');
        Verification_Packet__c vp2 = new Verification_Packet__c();
        vp2.Case__c = caseRecord.Id;
        vp2.Is_Active__c = true;
        INSERT vp2;
        ComplieVerificationPacketController.createSendRequest(caseRecord, sendReqJson);
        Test.stopTest();
    }
    @isTest
    public static void getAssetsForMergeTest(){
        CloudDataTestFactory.createCloudConfig();
        CurrentEntityIDSequence__c settingsInstance = CurrentEntityIDSequence__c.getOrgDefaults();
        settingsInstance.Entity_ID__c = '0000000';
        UPSERT settingsInstance;
        System.assert(settingsInstance.Id != null, 'Upsert settingsInstance is not Success');
        CurrentECFMGIDSequence__c settingsInstance1 = CurrentECFMGIDSequence__c.getOrgDefaults();
        settingsInstance1.ECFMG_ID__c = '0000000';
        UPSERT settingsInstance1;
        System.assert(settingsInstance1.Id != null, UPSERT_SETT_INST_NOT_SUCC);
        Account acc = new Account();
        acc.Name = TEST_ACCT;
        acc.BillingCountry = 'India';
        INSERT acc;
        System.assert(acc.Id != null, ACCT_NOT_CREATED);
        Contact con = new Contact();
        con.FirstName = 'Test';
        con.LastName = 'Test';
        con.AccountId = acc.Id;
        INSERT con;     
        System.Assert(con.Id!= null, CONTACT_NOT_CREATED);
        Id cvRTId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_CREDENTIAL_VERIFICATION).getRecordTypeId();
        Id assetRecTypeVerification = Schema.SObjectType.Asset.getRecordTypeInfosByDeveloperName().get(Constants.ASSET_RECORD_TYPE_VERIFICATION).getRecordTypeId();
        Id assetRecTypeCredential = Schema.SObjectType.Asset.getRecordTypeInfosByDeveloperName().get(Constants.ASSET_RECORD_TYPE_CREDENTIAL).getRecordTypeId();
        Id medEduAsstRecTypeId = Schema.SObjectType.Asset.getRecordTypeInfosByDeveloperName().get(Constants.ASSET_RECORD_TYPE_MED_EDU_FORM).getRecordTypeId();
        String assetUrl = 'https://ecfmglocal001.blob.core.windows.net/sfdc-applicant-documents/0033F00000Sul33QAB_Passport_0.jpeg';
        Case caseRecord = new Case();
        caseRecord.Entity__c = acc.Id;
        caseRecord.ContactId = con.Id;
        caseRecord.RecordTypeId = cvRTId;
        caseRecord.Internal_Status__c = Constants.CASE_STATUS_NEW;
        caseRecord.Send_Method__c = Constants.SEND_METHOD_PAPER;
        caseRecord.service__c = Constants.CASE_SERVICE_EPIC;
        INSERT caseRecord;
        System.assert(caseRecord.Id != null, CASE_NOT_INSERTED);
        List<Asset2Verification__c> asset2VerList = new List<Asset2Verification__c>();
        List<Asset> testAssets = new List<Asset>();
        Asset asst = new Asset();
        asst.Name = Constants.ASSET_NAME_CREDENTIAL_REQUEST;
        asst.AccountId = acc.Id;
        asst.ContactId = con.Id;
        asst.Case__c = caseRecord.Id;
        asst.RecordTypeId = assetRecTypeCredential;
        asst.Type__c = Constants.ASSET_TYPE_FINAL_MED_SCHOOL_TRANSCRIPT;
        asst.Azure_Storage_URL__c = assetUrl;
        asst.Status = Constants.ASSET_STATUS_VERIFIED;
        testAssets.add(asst);
        Asset asst1 = new Asset();
        asst1.Type__c = Constants.ASSET_TYPE_TRANSLATION;
        asst1.Name = Constants.ASSET_TYPE_FINAL_MED_SCHOOL_TRANSCRIPT + ' - ' + Constants.ASSET_TYPE_TRANSLATION;
        asst1.AccountId = acc.Id;
        asst1.ContactId = con.Id;
        asst1.Case__c = caseRecord.Id;
        asst1.RecordTypeId = assetRecTypeCredential;
        asst1.Azure_Storage_URL__c = assetUrl;
        testAssets.add(asst1);
        Asset asst2 = new Asset();
        asst2.Type__c = Constants.ASSET_TYPE_VERIFICATION_FORM;
        asst2.Name = Constants.ASSET_NAME_UNIVERSAL_VERIFICATION_FORM;
        asst2.AccountId = acc.Id;
        asst2.ContactId = con.Id;
        asst2.Case__c = caseRecord.Id;
        asst2.RecordTypeId = assetRecTypeVerification;
        asst2.Azure_Storage_URL__c = assetUrl;
        testAssets.add(asst2);
        Asset asst3 = new Asset();
        asst3.Type__c = Constants.ASSET_TYPE_PHOTO;
        asst3.Status = Constants.ASSET_STATUS_VERIFIED;
        asst3.Name = Constants.ASSET_NAME_PHOTO;
        asst3.AccountId = acc.Id;
        asst3.ContactId = con.Id;
        asst3.RecordTypeId = GenericUtilities.getRecordTypeIdByDevName('Asset', Constants.ASSET_RECORD_TYPE_IDENTITY);
        asst3.Azure_Storage_URL__c = assetUrl;
        testAssets.add(asst3);
        Asset asst4 = new Asset();
        asst4.Type__c = Constants.ASSET_TYPE_IDENTITY_VERIFICATION;
        asst4.Status = Constants.ASSET_STATUS_VERIFIED;
        asst4.Name = Constants.ASSET_NAME_REDACTED_ID_FORM;
        asst4.AccountId = acc.Id;
        asst4.ContactId = con.Id;
        asst4.RecordTypeId = GenericUtilities.getRecordTypeIdByDevName('Asset', Constants.ASSET_RECORD_TYPE_IDENTITY);
        asst4.Azure_Storage_URL__c = assetUrl;
        testAssets.add(asst4);
        Asset asst5 = new Asset();
        asst5.Type__c = Constants.ASSET_TYPE_IDENTITY_VERIFICATION;
        asst5.Status = Constants.ASSET_STATUS_VERIFIED;
        asst5.Name = Constants.ASSET_NAME_MCC_RELEASE_FORM;
        asst5.AccountId = acc.Id;
        asst5.ContactId = con.Id;
        asst5.RecordTypeId = GenericUtilities.getRecordTypeIdByDevName('Asset', Constants.ASSET_RECORD_TYPE_IDENTITY);
        asst5.Azure_Storage_URL__c = assetUrl;
        testAssets.add(asst5);
        Asset asst6 = new Asset();
        asst6.Name = Constants.ASSET_TYPE_MED_EDU_FORM;
        asst6.AccountId = acc.Id;
        asst6.ContactId = con.Id;
        asst6.Case__c = caseRecord.Id;
        asst6.RecordTypeId = medEduAsstRecTypeId;
        asst6.Type__c = Constants.ASSET_TYPE_MED_EDU_FORM;
        asst6.Azure_Storage_URL__c = assetUrl;
        testAssets.add(asst6);
        Asset asst7 = new Asset();
        asst7.Name = Constants.ASSET_NAME_CREDENTIAL_REQUEST;
        asst7.AccountId = acc.Id;
        asst7.ContactId = con.Id;
        asst7.RecordTypeId = assetRecTypeCredential;
        asst7.Type__c = Constants.ASSET_TYPE_FINAL_MED_DIPLOMA;
        asst7.Azure_Storage_URL__c = assetUrl;
        asst7.Status = Constants.ASSET_STATUS_VERIFIED;
        testAssets.add(asst7);
        INSERT testAssets;
        System.assert(testAssets[0].Id != null, 'Asset not inserted');
        Verification_Packet__c verPackNew = new Verification_Packet__c();
        verPackNew.Case__c = caseRecord.Id;
        verPackNew.Is_Active__c = true;
        INSERT verPackNew;
        System.assert(verPackNew.Id != null, VER_PACK_NOT_INSERTED);
        Asset2Verification__c eachAsset2Ver = new Asset2Verification__c();
        eachAsset2Ver.Verification_Packet__c = verPackNew.Id;
        eachAsset2Ver.asset__c = asst.Id;
        eachAsset2Ver.Document_Type__c = Constants.ASSET2VER_DOCTYPE_SOURCE;
        asset2VerList.add(eachAsset2Ver);
        Asset2Verification__c eachAsset2Ver1 = new Asset2Verification__c();
        eachAsset2Ver1.Verification_Packet__c = verPackNew.Id;
        eachAsset2Ver1.asset__c = asst1.Id;
        eachAsset2Ver1.Document_Type__c = Constants.ASSET2VER_DOCTYPE_SUPPORTING_DOCUMENT;
        asset2VerList.add(eachAsset2Ver1);
        Asset2Verification__c eachAsset2Ver2 = new Asset2Verification__c();
        eachAsset2Ver2.Verification_Packet__c = verPackNew.Id;
        eachAsset2Ver2.asset__c = asst2.Id;
        eachAsset2Ver2.Document_Type__c = Constants.ASSET2VER_DOCTYPE_NEW_VER_FORM;
        asset2VerList.add(eachAsset2Ver2);
        INSERT asset2VerList;
        System.assert(asset2VerList[0].Id != null, 'Asset2Ver is not inserted');
        List<ComplieVerificationPacketController.AssetMergeWrapper> asstMergeWrapperList = ComplieVerificationPacketController.getAssetsForMerge(String.valueOf(caseRecord.Id));
        System.assertEquals(4, asstMergeWrapperList.size(), ALL_ASST_NOT_RETURNED);
        caseRecord.service__c = Constants.CASE_SERVICE_EICS;
        UPDATE caseRecord;
        System.assert(caseRecord.Id != null, CASE_NOT_UPDATED);
        List<ComplieVerificationPacketController.AssetMergeWrapper> asstMergeWrapperList2 = ComplieVerificationPacketController.getAssetsForMerge(String.valueOf(caseRecord.Id));
        System.assertEquals(5, asstMergeWrapperList2.size(), ALL_ASST_NOT_RETURNED);
        caseRecord.RecordTypeId = Constants.MEDEDUFORMID;
        UPDATE caseRecord;
        System.assert(caseRecord.Id != null, CASE_NOT_UPDATED);
        List<ComplieVerificationPacketController.AssetMergeWrapper> asstMergeWrapperList3 = ComplieVerificationPacketController.getAssetsForMerge(String.valueOf(caseRecord.Id));
        System.assertEquals(4, asstMergeWrapperList3.size(), ALL_ASST_NOT_RETURNED);
        caseRecord.service__c = Constants.CASE_SERVICE_EPIC;
        UPDATE caseRecord;
        System.assert(caseRecord.Id != null, CASE_NOT_UPDATED);
        List<ComplieVerificationPacketController.AssetMergeWrapper> asstMergeWrapperList4 = ComplieVerificationPacketController.getAssetsForMerge(String.valueOf(caseRecord.Id));
        System.assertEquals(4, asstMergeWrapperList4.size(), ALL_ASST_NOT_RETURNED);
    }
    //public static String getContactIdByCaseId(Id caseId){
    @isTest 
    static void testGetContactIdByCaseId(){
        CurrentEntityIDSequence__c settings = CurrentEntityIDSequence__c.getOrgDefaults();
        settings.Entity_ID__c = '0000000';
        upsert settings CurrentEntityIDSequence__c.Id;
        CurrentECFMGIDSequence__c curECFMGSetting = CurrentECFMGIDSequence__c.getOrgDefaults();
        curECFMGSetting.ECFMG_ID__c = '00000001';
        upsert curECFMGSetting CurrentECFMGIDSequence__c.Id;

        Id acctRecTypeId = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get(Constants.ACCOUNT_RECORD_TYPE_ENTITY).getRecordTypeId();
        Id applRecTypeId = Schema.SObjectType.Contact.getRecordTypeInfosByDeveloperName().get(Constants.CONTACT_RECORD_TYPE_APPLICANT ).getRecordTypeId();
        Account acc = new Account();
        acc.Name = TEST_ACCT;
        acc.BillingCountry = 'India';
        acc.RecordTypeId = acctRecTypeId;
        INSERT acc;
        System.assert(acc.Id != null, ACCT_NOT_CREATED);
        Contact con = new Contact();
        con.AccountId = acc.Id;
        con.LastName = 'Test';
        con.Email = 'test1@test.com';
        con.RecordTypeId = applRecTypeId;
        INSERT con;
        System.assert(con.Id != null, CONTACT_NOT_CREATED);
        Id cvRTId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_CREDENTIAL_VERIFICATION).getRecordTypeId();
        Case caseRecord = new Case();
        caseRecord.Entity__c = acc.Id;
        caseRecord.ContactId = con.Id;
        caseRecord.RecordTypeId = cvRTId;
        caseRecord.Internal_Status__c = Constants.CASE_STATUS_NEW;
        caseRecord.Send_Method__c = Constants.SEND_METHOD_PAPER;
        caseRecord.service__c = Constants.CASE_SERVICE_EPIC;
        INSERT caseRecord;
        System.assert(caseRecord.Id != null, CASE_NOT_INSERTED);
        Test.startTest();
        String returnValue = ComplieVerificationPacketController.getContactIdByCaseId(caseRecord.Id);
        System.assertNotEquals(returnValue,'', 'Contact Id not returned');
        Test.stopTest();
    }
    @isTest
    static void testUploadInCompleteCoverLetter(){
        CurrentEntityIDSequence__c settings = CurrentEntityIDSequence__c.getOrgDefaults();
        settings.Entity_ID__c = '0000000';
        upsert settings CurrentEntityIDSequence__c.Id;
        CurrentECFMGIDSequence__c curECFMGSetting = CurrentECFMGIDSequence__c.getOrgDefaults();
        curECFMGSetting.ECFMG_ID__c = '00000001';
        upsert curECFMGSetting CurrentECFMGIDSequence__c.Id;

        Id acctRecTypeId = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get(Constants.ACCOUNT_RECORD_TYPE_ENTITY).getRecordTypeId();
        Id applRecTypeId = Schema.SObjectType.Contact.getRecordTypeInfosByDeveloperName().get(Constants.CONTACT_RECORD_TYPE_APPLICANT ).getRecordTypeId();
        Account acc = new Account();
        acc.Name = TEST_ACCT;
        acc.BillingCountry = 'India';
        acc.RecordTypeId = acctRecTypeId;
        INSERT acc;
        System.assert(acc.Id != null, ACCT_NOT_CREATED);
        Contact con = new Contact();
        con.AccountId = acc.Id;
        con.LastName = 'Test';
        con.Email = 'test1@test.com';
        con.RecordTypeId = applRecTypeId;
        INSERT con;
        System.assert(con.Id != null, CONTACT_NOT_CREATED);
        Id cvRTId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_CREDENTIAL_VERIFICATION).getRecordTypeId();
        Case caseRecord = new Case();
        caseRecord.Entity__c = acc.Id;
        caseRecord.ContactId = con.Id;
        caseRecord.RecordTypeId = cvRTId;
        caseRecord.Internal_Status__c = Constants.CASE_STATUS_NEW;
        caseRecord.Send_Method__c = Constants.SEND_METHOD_PAPER;
        caseRecord.service__c = Constants.CASE_SERVICE_EPIC;
        INSERT caseRecord;
        System.assert(caseRecord.Id != null, CASE_NOT_INSERTED);
        Test.startTest();
        Boolean returnValue = ComplieVerificationPacketController.uploadInCompleteCoverLetter(caseRecord.Id);
        System.assertEquals(returnValue,true, 'cover letter uploaded');
        Test.stopTest();
    }
    @isTest 
    static void testGetCont2AcctService(){
        CurrentEntityIDSequence__c settings = CurrentEntityIDSequence__c.getOrgDefaults();
        settings.Entity_ID__c = '0000000';
        upsert settings CurrentEntityIDSequence__c.Id;
        CurrentECFMGIDSequence__c curECFMGSetting = CurrentECFMGIDSequence__c.getOrgDefaults();
        curECFMGSetting.ECFMG_ID__c = '00000001';
        upsert curECFMGSetting CurrentECFMGIDSequence__c.Id;

        Id acctRecTypeId = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get(Constants.ACCOUNT_RECORD_TYPE_ENTITY).getRecordTypeId();
        Id entityConRecTypeId = Schema.SObjectType.Contact.getRecordTypeInfosByDeveloperName().get(Constants.CONTACT_RECORD_TYPE_ENTITY_CONTACT).getRecordTypeId();
        Account acc = new Account();
        acc.Name = TEST_ACCT;
        acc.BillingStreet = 'Market street';
        acc.BillingCity = 'Philadelphia';
        acc.BillingState='Pennsylvania';
        acc.BillingCountry = 'United States';
        acc.BillingPostalCode = '19342';
        acc.RecordTypeId = acctRecTypeId;
        INSERT acc;
        System.assert(acc.Id != null, ACCT_NOT_CREATED);
        Contact con = new Contact();
        con.AccountId = acc.Id;
        con.LastName = 'Test';
        con.Email = 'test1@test.com';
        con.RecordTypeId = entityConRecTypeId;
        INSERT con;
        System.assert(con.Id != null, CONTACT_NOT_CREATED);

        Service__c volService = new Service__c(Name='Volume Report Recipients');
        INSERT volService;
        System.assert(volService.Id != null, 'Service insert failed');
        Account2Service__c accServ1 = new Account2Service__c(Account__c=acc.id,Active__c=true,Service__c=volService.Id);
        INSERT accServ1;
        System.assert(accServ1.Id != null, 'Accont2Service insert failed');
        Contact2AcctService__c conAcct1 = new Contact2AcctService__c(Account_Service__c=accServ1.Id,Active__c=true,Service_Contact__c=con.Id,Role__c='User',Credential_Type__c='Final Medical Diploma',Preferred_mode_of_communication__c='Paper',City__c='Philadelphia',Country__c='United States',State__c='Pennsylvania',Postal_Code__c='19342',Physical_Address__c='test',Street__c='Market street');
        INSERT conAcct1;
        System.assert(conAcct1.Id != null, 'Contact2AcctService insert failed');
        Id cvRTId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_CREDENTIAL_VERIFICATION).getRecordTypeId();
        Case caseRecord = new Case();
        caseRecord.Entity__c = acc.Id;
        caseRecord.ContactId = con.Id;
        caseRecord.RecordTypeId = cvRTId;
        caseRecord.Internal_Status__c = Constants.CASE_STATUS_NEW;
        caseRecord.Send_Method__c = Constants.SEND_METHOD_PAPER;
        caseRecord.service__c = Constants.CASE_SERVICE_EPIC;
        caseRecord.Document_Type__c='Final Medical Diploma';
        INSERT caseRecord;
        System.assert(caseRecord.Id != null, CASE_NOT_INSERTED);
        LIST<Account2Service__c> acc2serList = [SELECT Id,Name,Account__c,Service__r.Name FROM Account2Service__c WHERE Account__c=:acc.Id LIMIT 1];
        Test.startTest();
        Map<String,String> returnValue = ComplieVerificationPacketController.getCont2AcctService(acc2serList[0].Id,caseRecord);
        System.assertEquals(!returnValue.isEmpty(),true, 'contact2acctservice retrieved');
        Test.stopTest();
    }
    @isTest 
    static void testGetCourierTypePicklistValues(){
        Test.startTest();
        List<String> returnValue = ComplieVerificationPacketController.getCourierTypePicklistValues();
        System.assertEquals(!returnValue.isEmpty(),true, 'Courier type picklist values retrieved');
        Test.stopTest();
    }
    @isTest 
    static void testMarkForDeletionPrevAssets(){
        CurrentEntityIDSequence__c settings = CurrentEntityIDSequence__c.getOrgDefaults();
        settings.Entity_ID__c = '0000000';
        upsert settings CurrentEntityIDSequence__c.Id;
        CurrentECFMGIDSequence__c curECFMGSetting = CurrentECFMGIDSequence__c.getOrgDefaults();
        curECFMGSetting.ECFMG_ID__c = '00000001';
        upsert curECFMGSetting CurrentECFMGIDSequence__c.Id;
        Id acctRecTypeId = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get(Constants.ACCOUNT_RECORD_TYPE_ENTITY).getRecordTypeId();
        Id applRecTypeId = Schema.SObjectType.Contact.getRecordTypeInfosByDeveloperName().get(Constants.CONTACT_RECORD_TYPE_APPLICANT ).getRecordTypeId();
        Account acc = new Account();
        acc.Name = TEST_ACCT;
        acc.BillingStreet = 'Market street';
        acc.BillingCity = 'Philadelphia';
        acc.BillingState='Pennsylvania';
        acc.BillingCountry = 'United States';
        acc.BillingPostalCode = '19342';
        acc.RecordTypeId = acctRecTypeId;
        INSERT acc;
        System.assert(acc.Id != null, ACCT_NOT_CREATED);
        Contact con = new Contact();
        con.AccountId = acc.Id;
        con.LastName = 'Test';
        con.Email = 'test1@test.com';
        con.RecordTypeId = applRecTypeId;
        INSERT con;
        System.assert(con.Id != null, CONTACT_NOT_CREATED);
        //Insert Asset
        Asset newAsset = new Asset();
        newAsset.Name = 'Verification';
        newAsset.Type__c = 'Photo';
        newAsset.Status = 'New';
        newAsset.ContactId = con.Id;
        INSERT newAsset;
        system.assert(newAsset.Id != null,'newAsset is not inserted');
        Test.startTest();
        LIST<Asset> returnAsset = ComplieVerificationPacketController.markForDeletionPrevAssets('Verification','Photo',con.Id);
        System.assertEquals(!returnAsset.isEmpty(),true, 'Assets marked for deletion values retrieved');
        Test.stopTest();
    }
    @isTest 
    static void testCreateAsset2VerMedEduForm(){
        CurrentEntityIDSequence__c settingsInstance = CurrentEntityIDSequence__c.getOrgDefaults();
        settingsInstance.Entity_ID__c = '0000000';
        upsert settingsInstance;
        System.assert(settingsInstance.Id != null, 'Upsert settingsInstance is not Success');
        CurrentECFMGIDSequence__c settingsInstance1 = CurrentECFMGIDSequence__c.getOrgDefaults();
        settingsInstance1.ECFMG_ID__c = '0000000';
        upsert settingsInstance1;
        System.assert(settingsInstance1.Id != null, UPSERT_SETT_INST_NOT_SUCC);
        cadmus_core__Doc_Config__c docConfig = new cadmus_core__Doc_Config__c();
        docConfig.Name = 'Verification Cover Letter - English';
        docConfig.cadmus_core__CustomerDocumentConfigId__c = '74da494d-11fc-444c-8192-78e729c415e8';
        INSERT docConfig;
        System.assert(docConfig.Id != null, 'docConfig creation is not Successful');
        cadmus_core__Doc_Config__c docConfig2 = new cadmus_core__Doc_Config__c();
        docConfig2.Name = 'Universal Verification Form - English';
        docConfig2.cadmus_core__CustomerDocumentConfigId__c = 'f373d0f0-bfd2-4864-b946-3f7a8a07fa01';
        INSERT docConfig2;
        System.assert(docConfig2.Id != null, 'docConfig2 creation is not Successful');
        Account acc = new Account();
        acc.Name = TEST_ACCT;
        acc.BillingCountry = 'India';
        INSERT acc;
        System.assert(acc.Id != null, ACCT_NOT_CREATED);
        Contact con = new Contact();
        con.FirstName = 'Test';
        con.LastName = 'Test';
        con.AccountId = acc.Id;
        INSERT con;     
        System.Assert(con.Id!= null, CONTACT_NOT_CREATED);
        Id medEduFormCaseRTId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_MED_EDU_FORM).getRecordTypeId();
        Id assetRecTypeCred = Schema.SObjectType.Asset.getRecordTypeInfosByDeveloperName().get(Constants.ASSET_RECORD_TYPE_CREDENTIAL).getRecordTypeId();
        Case caseRecord = new Case();
        caseRecord.Entity__c = acc.Id;
        caseRecord.ContactId = con.Id;
        caseRecord.RecordTypeId = medEduFormCaseRTId;
        INSERT caseRecord;
        system.assert(caseRecord.Id != null, CASE_NOT_INSERTED);
        //insert VP
        Verification_Packet__c verPackNew = new Verification_Packet__c();
        verPackNew.Case__c = caseRecord.Id;
        verPackNew.Is_Active__c = true;
        INSERT verPackNew;
        system.assert(verPackNew.Id != null, 'VP not inserted');
        Asset newAsset = new Asset();
        newAsset.Case__c = caseRecord.Id;
        newAsset.uploaded_by_applicant__c = True;
        newAsset.Name = Constants.ASSET_TYPE_FINAL_MED_DIPLOMA;
        newAsset.Type__c = Constants.ASSET_TYPE_FINAL_MED_DIPLOMA;
        newAsset.ContactId = con.Id;
        newAsset.Status = Constants.ASSET_STATUS_ACCEPTED;
        newAsset.RecordTypeId = assetRecTypeCred;
        INSERT newAsset;
        system.assert(newAsset.Id != null,'newAsset is not inserted');
        Asset2Verification__c eachAsset2Ver1 = new Asset2Verification__c();
        eachAsset2Ver1.Verification_Packet__c = verPackNew.Id;
        eachAsset2Ver1.asset__c = newAsset.Id;
        eachAsset2Ver1.Document_Type__c = Constants.ASSET2VER_DOCTYPE_SUPPORTING_DOCUMENT;
        INSERT eachAsset2Ver1;
        system.assert(eachAsset2Ver1.Id != null, 'Asset2Verification not inserted');
        Test.startTest();
        ComplieVerificationPacketController.createAsset2VerMedEduForm(caseRecord.Id, verPackNew);
        System.assertNotEquals(eachAsset2Ver1.Id, null, 'Asset2Verification created successfuly');
        Test.stopTest();
    }
}