@isTest
public class Actionable_GenerateParametersBeforeTest extends ECFMGTestFactory{
    @IsTest public static void setup(){
        CloudDataTestFactory.createCloudConfig();
        CurrentEntityIDSequence__c settings = CurrentEntityIDSequence__c.getOrgDefaults();
        settings.Entity_ID__c = '00000';
        upsert settings CurrentEntityIDSequence__c.Id;
        CurrentECFMGIDSequence__c curECFMGSetting = CurrentECFMGIDSequence__c.getOrgDefaults();
        curECFMGSetting.ECFMG_ID__c = '00000';
        upsert curECFMGSetting CurrentECFMGIDSequence__c.Id;
       /* Account acc = new Account();
        acc.Name = 'TEST_ACCOUNT';
        INSERT acc;
        System.assert(acc.Id != null, 'Failed to insert account Record!');
        Contact con = new Contact();
        con.AccountId = acc.Id;
        con.LastName = 'Test';
        con.Email = 'test@test.com';
        INSERT con;
        System.assert(con.Id != null, 'Failed to insert contact Record!');        
        Id profId = [Select id from profile where name='4-Customer Community Plus Login' LIMIT 1].id;
        User user1 = new User();
        user1.alias = 'testUser';
        user1.email = 'test2@test.com';
        user1.emailencodingkey = 'UTF-8';
        user1.lastname = 'test user';
        user1.languagelocalekey = 'en_US';
        user1.localesidkey = 'en_US';
        user1.profileid = profId;
        user1.country = 'United States';
        user1.IsActive = true;
        user1.ContactId = con.Id;
        user1.timezonesidkey = 'America/Los_Angeles';
        user1.username = 'testuser@test.com';
        INSERT user1;
        System.assert(user1.Id != null, 'Failed to insert user Record!');*/
    }
    @isTest
    public static void credentialCoverLetterDs(){
        Id epicExtRecTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_EPIC_EXTRACTION).getRecordTypeId();
        Id accrecTypeId = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get(Constants.ACCOUNT_RECORD_TYPE_REGULATORY_ORG).getRecordTypeId();
        cadmus_core__Data_Source__c dataSource = new cadmus_core__Data_Source__c();
        dataSource.Name = 'CredentialCV Data Source';
        dataSource.RecordTypeId = Schema.SObjectType.cadmus_core__Data_Source__c.getRecordTypeInfosByDeveloperName().get('KEYVALUE').getRecordTypeId();
        dataSource.cadmus_core__Type__c = 'Single sObject';
        insert dataSource;
        cadmus_core__Doc_Config__c docConfig = new cadmus_core__Doc_Config__c();
        docConfig.Name = 'CredentialCV Doc Config';
        docConfig.RecordTypeId = Schema.SObjectType.cadmus_core__Doc_Config__c.getRecordTypeInfosByDeveloperName().get('MAIN').getRecordTypeId();
        docConfig.cadmus_core__Delivery_option__c = 'BASE64';
        insert docConfig;
        System.assert(docConfig.Id != null, 'Failed to insert Doc Config Record!');
        Account acc = (Account)ECFMGTestFactory.make(ECFMGDefaultTestData.DefaultAccountData.class, new Account(Name = 'TEST_ACCOUNT'));
        run();
        System.assert(acc.Id != null, 'Failed to insert account Record!');
        Contact con = new Contact();
        con.AccountId = acc.Id;
        con.LastName = 'Test';
        con.Email = 'test@test.com';
        INSERT con;
                System.assert(con.Id != null, 'Failed to insert contact Record!');  
        Service__c ser = new Service__c();
        ser.name = Constants.EPIC_SERVICENAME;
        insert ser;
        Id profId = [Select id from profile where name='4-Customer Community Plus Login' LIMIT 1].id;
        User user1 = new User();
        user1.alias = 'testUser';
        user1.email = 'test2@test.com';
        user1.emailencodingkey = 'UTF-8';
        user1.lastname = 'test user';
        user1.languagelocalekey = 'en_US';
        user1.localesidkey = 'en_US';
        user1.profileid = profId;
        user1.country = 'United States';
        user1.IsActive = true;
        user1.ContactId = con.Id;
        user1.timezonesidkey = 'America/Los_Angeles';
        user1.username = 'testuser@test.com';
        INSERT user1;
        System.assert(user1.Id != null, 'Failed to insert user Record!');
       
        user usr = [select Id,contactId from User where username = 'testuser@test.com' limit 1];
       // List<User> usr = new List<User>();
        //usr = [select Id,contactId from User where username = 'testuser@test.com' limit 1];
       
        Account newAcct = new Account();
        newAcct.Name = 'Test AccountCred';
        newAcct.RecordTypeId = accrecTypeId;
        newAcct.BillingCity = 'test';
        newAcct.BillingCountry = 'India';
        newAcct.BillingPostalCode = '1234';
        newAcct.BillingState = 'West Bengal';
        newAcct.BillingStreet = 'test';
        Insert newAcct;
        System.assert(newAcct.Id!= null,'Account not created');
        System.runAs(usr){    
            Asset asst1 = new Asset();
            asst1.Name = Constants.ASSET_TYPE_TCT;
            asst1.Status = Constants.ASSET_STATUS_IN_PROGRESS;
            asst1.ContactId = usr.ContactId;
            asst1.InstallDate = System.Today();
            asst1.key__c = Constants.ASSET_TYPE_TCT;
            asst1.Type__c = 'Photo';
            asst1.Azure_Storage_URL__c = 'assetUrl';
            insert asst1;
            System.assert(asst1.Id != null, 'asset insertion failed');
            Case epicExtCase = new Case();
            epicExtCase.RecordTypeId = epicExtRecTypeId;
            epicExtCase.ContactId = usr.ContactId;
            epicExtCase.Internal_Status__c = Constants.CASE_STATUS_ENROLLMENT_COMPLETED;
            INSERT epicExtCase;
            System.assert(epicExtCase.Id != null, 'epic case null');
            EpicCredVerController.CredUploadWrapper wrapper = new EpicCredVerController.CredUploadWrapper();
            wrapper.caseId = epicExtCase.Id;
            wrapper.catsId = null;
            wrapper.credUrl = asst1.Azure_Storage_URL__c;
            wrapper.haveCertificate = false;
            wrapper.requestedToSend = false;
            wrapper.entityId = newAcct.Id;
            wrapper.nameDifferent = false; 
            wrapper.nameOnDoc = 'Test';
            wrapper.translationRequired = false;
            EpicCredVerController.EVRWrapper evr = new EpicCredVerController.EVRWrapper();
            evr.program = 'EPIC';
            evr.authId = '';
            evr.ref = 'EPIC1234';
            evr.regOrgDNK = true;
            Contact_Association_Type_Staging__c catsRecordNew = new Contact_Association_Type_Staging__c();
            catsRecordNew.account__c = newAcct.Id;
            catsRecordNew.Title__c = 'TestTile';   
            catsRecordNew.Credential_Type__c = 'Final Medical Diploma';
            Boolean createResult = EpicCredVerController.createCredential(JSON.serialize(wrapper),JSON.serialize(catsRecordNew),JSON.serialize(evr));
            System.assert(createResult, 'Insertion failed'); 
        }
        Contact_Association_Type_Staging__c cats = [Select id,alternate_entity__c from Contact_Association_Type_Staging__c limit 1];
        cats.Alternate_Entity__c = newAcct.Id;
        update cats;
        Case credVer = [Select id,Document_Type__c from case where recordType.DeveloperName =: Constants.CASE_RECORD_TYPE_CREDENTIAL_VERIFICATION];
        Actionable_GenerateParametersBefore action = new Actionable_GenerateParametersBefore();
        action.execute(new cadmus_core__Actionable__c(), docConfig.Id, credVer.Id, new Map<String, Object> (), new cadmus_core.ConvertController.ConvertDataModel());
    }    
}