@isTest
public with sharing class GenerateAttestFormandLetterTest{
    @testSetup static void setup(){
        CurrentECFMGIDSequence__c curECFMGSetting = CurrentECFMGIDSequence__c.getOrgDefaults();
        curECFMGSetting.ECFMG_ID__c = '00000001';
        UPSERT curECFMGSetting;
        System.assert(curECFMGSetting.Id!=null,'ecfmg sequence id setting not found');
        CurrentEntityIDSequence__c curEntitySetting = CurrentEntityIDSequence__c.getOrgDefaults();
        curEntitySetting.Entity_ID__c = '0000000';
        UPSERT curEntitySetting;
        System.assert(curEntitySetting.Id!=null,'Entity sequence id setting not found');
        WDOMS_ID_Sequence__c wdomsIdSeq = WDOMS_ID_Sequence__c.getOrgDefaults();
        wdomsIdSeq.AKA_ID__c = 1000;
        UPSERT wdomsIdSeq;
        Id applRecTypeId = Schema.SObjectType.Contact.getRecordTypeInfosByDeveloperName().get(Constants.CONTACT_RECORD_TYPE_APPLICANT ).getRecordTypeId();
        Account acc = new Account();
        acc.Name = 'Test Account';
        acc.Unique_Medical_School_ID__c = 'TA123';
        acc.BillingCountry = 'United States';
        acc.BillingState = 'New Jersey';
        acc.BillingPostalCode = 'x123';
        INSERT acc;
        System.assert(acc.Id!=null,'Account not created');
        Contact con = new Contact();
        con.AccountId = acc.Id;
        con.LastName = 'Test';
        con.Email = 'test1@test.com';
        con.RecordTypeId = applRecTypeId;
        INSERT con;
        System.assert(con.Id!=null,'Contact not created');
    }
    @IsTest
    public static void testcheckAttestAsstExists(){
        Account acc = [SELECT Id FROM Account LIMIT 1];
        Contact con = [SELECT Id FROM Contact LIMIT 1];
        Id entityRecordType = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get('Entity').getRecordTypeId();
        Account mainAcc = new Account();
        mainAcc.Name = 'UserAccount1';
        mainAcc.RecordTypeId = entityRecordType;
        mainAcc.BillingCountry = 'United States';
        mainAcc.BillingState = 'New Jersey';
        mainAcc.BillingPostalCode = 'x123';
        INSERT mainAcc;
        System.assert(mainAcc.Id!=null,'Entity account not found');
        Id degMedSchRecordTypeId = Schema.SObjectType.Contact_Association_Type__c.getRecordTypeInfosByDeveloperName().get(Constants.CONASCTYPE_RECORD_TYPE_DEGREE_MEDICAL_SCHOOL).getRecordTypeId();
        Contact_Association_Type__c newCats = new Contact_Association_Type__c();
        newCats.Contact__c = con.Id;
        newCats.Account__c = mainAcc.Id;
        newCats.RecordTypeId = degMedSchRecordTypeId;
        INSERT newCats;
        Id appForCerrecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_APP_FOR_CERT).getRecordTypeId();
        Case appForCert = new Case();
        appForCert.RecordTypeId = appForCerrecordTypeId;
        appForCert.ContactId = con.Id;
        appForCert.Internal_Status__c = 'In Review';
        appForCert.AccountId = acc.Id;
        INSERT appForCert;
        System.assert(appForCert.Id!=null,'Case not found');
        Id attestCaserecTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_ATTESTATION).getRecordTypeId();
        Case newCase = new Case();
        newCase.RecordTypeId = attestCaserecTypeId;
        newCase.ContactId = con.Id;
        newCase.AccountId = acc.Id;
        newCase.Internal_Status__c = 'New';
        newCase.Case_Type__c = 'Attestation Case';
        INSERT newCase;
        System.assert(newCase.Id!=null,'Case not created');
        Case newCase2 = new Case();
        newCase2.RecordTypeId = attestCaserecTypeId;
        newCase2.ContactId = con.Id;
        newCase2.AccountId = acc.Id;
        newCase2.Internal_Status__c = 'New';
        newCase2.Case_Type__c = 'Attestation Case';
        INSERT newCase2;
        System.assert(newCase2.Id!=null,'Case not created');
        Id attestAsstrecTypeId = Schema.SObjectType.Asset.getRecordTypeInfosByDeveloperName().get(Constants.ASSET_RECORD_TYPE_ATTESTATION).getRecordTypeId();
        Asset attestForm = new Asset();
        attestForm.Name = 'Attestation Form';
        attestForm.Type__c = Constants.ASSET_TYPE_ATTEST_FORM;
        attestForm.Status = 'In Progress';
        attestForm.RecordTypeId = attestAsstrecTypeId;
        attestForm.ContactId = con.Id;
        attestForm.AccountId = acc.Id;
        attestForm.Case__c = newCase.Id;
        INSERT attestForm;
        cadmus_core__Doc_Config__c docConfig = new cadmus_core__Doc_Config__c();
        docConfig.Name = 'Attestation Form';
        docConfig.RecordTypeId = Schema.SObjectType.cadmus_core__Doc_Config__c.getRecordTypeInfosByDeveloperName().get('MAIN').getRecordTypeId();
        docConfig.cadmus_core__Delivery_option__c = 'BASE64';
        INSERT docConfig;
        cadmus_core__Doc_Config__c docConfig2 = new cadmus_core__Doc_Config__c();
        docConfig2.Name = 'Attestation Cover Letter';
        docConfig2.RecordTypeId = Schema.SObjectType.cadmus_core__Doc_Config__c.getRecordTypeInfosByDeveloperName().get('MAIN').getRecordTypeId();
        docConfig2.cadmus_core__Delivery_option__c = 'BASE64';
        INSERT docConfig2;
        Test.startTest();
        Boolean asstNotExists = GenerateAttestFormandLetter.checkAttestAsstExists(newCase2.Id);
        Boolean asstExists = GenerateAttestFormandLetter.checkAttestAsstExists(newCase.Id);
        Boolean updated = GenerateAttestFormandLetter.updateCaseStatus(newCase.Id);
        GenerateAttestFormandLetter.generateAttestFormAndLetterCallOut(newCase.Id);
        System.assert(!asstNotExists,'Assets found');
        System.assert(asstExists,'No assets found');
        System.assert(updated,'Case Status not updated');
        Test.stopTest();
    }
}