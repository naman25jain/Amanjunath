@isTest
public class Actionable_UploadDocumentToAzureBlobTest{
	public static final String TEST_ACCOUNT = 'Test Account';
	public static final String ENROLLMENT_REVERIFICATION_DEFICIENCY_COVER_LETTER = 'EnReverification Deficiency Cover Letter';
    public static final String ASSERT_FAILED_WARNING = 'Assert Failed to Create Enrollment Reverification template!';
    public static final String NEW_SERVICE_TEMPLATE = 'New Service Template';
    public static final String PIA_TEMPLATE = 'PIA Template';
	@testSetup static void setup(){
		CloudDataTestFactory.createCloudConfig();
        CurrentEntityIDSequence__c settings = CurrentEntityIDSequence__c.getOrgDefaults();
        settings.Entity_ID__c = '00000';
        upsert settings CurrentEntityIDSequence__c.Id;
        CurrentECFMGIDSequence__c curECFMGSetting = CurrentECFMGIDSequence__c.getOrgDefaults();
        curECFMGSetting.ECFMG_ID__c = '00000';
        upsert curECFMGSetting CurrentECFMGIDSequence__c.Id;
		Id evRTId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_ENROLLMENT_VERIFICATION).getRecordTypeId();
		Account acc = new Account();
		acc.Name = TEST_ACCOUNT;
        acc.BillingCountry = 'India';
		INSERT acc;
		System.assert(acc.Id != null, 'Fail to insert account Record!');
		Contact con = new Contact();
		con.AccountId = acc.Id;
		con.LastName = 'Test';
		con.Email = 'test@test.com';
		INSERT con;
		System.assert(con.Id != null, 'Fail to insert contact Record!');
		Case evCase = new Case();
		evCase.RecordTypeId = evRTId;
		evCase.ContactId = con.Id;
		INSERT evCase;
		System.assert(evCase.Id != null, 'Fail to insert case Record!');
	}
	@isTest
	public static void testExecute1() {
		Case evCase = [SELECT Id, ContactId FROM Case WHERE Contact.Email = 'test@test.com'
			LIMIT 1
		];
		Id assetRTId = Schema.SObjectType.Asset.getRecordTypeInfosByDeveloperName().get(Constants.ASSET_RECORD_TYPE_ENROLLMENT_VERIFICATION).getRecordTypeId();		
		Asset asst = new Asset();
		asst.recordTypeId = assetRTId;
		asst.Name = Constants.ASSET_TYPE_ENROLLMENT_VERIFICATION;
		asst.ContactId = evCase.ContactId;
		asst.Type__c = Constants.ASSET_TYPE_ENROLLMENT_VERIFICATION;
		asst.Case__c = evCase.Id;
		asst.Status = Constants.ASSET_STATUS_IN_PROGRESS;
		asst.Azure_Storage_URL__c = 'https://ecfmglocal001.blob.core.windows.net/sfdc-applicant-documents/00317000012ldOVAAY_New_Service_Template_2021-5-31_6_43_29.pdf';
		INSERT asst;
		cadmus_core.DocGenerationWrapper wrapper = new cadmus_core.DocGenerationWrapper();
		wrapper.response = new cadmus_core.CadmusHttpResponse();
		wrapper.response.base64 = Blob.valueOf('Test');
		Test.startTest();
		Test.setMock(HttpCalloutMock.class, new MockHttpResponseGenerator_UploadDocument());
		Actionable_UploadDocumentToAzureBlob action = new Actionable_UploadDocumentToAzureBlob();
		action.execute(new cadmus_core__Actionable__c(), null, evCase.Id, new Map<String, Object> (), new cadmus_core.ConvertController.ConvertDataModel(), wrapper);
		Test.stopTest();
		System.assert([SELECT Id, Azure_Storage_URL__c FROM Asset WHERE Type__c =: Constants.ASSET_TYPE_ENROLLMENT_VERIFICATION AND ContactId =: evCase.ContactId AND Case__c =: evCase.Id][0].Azure_Storage_URL__c != null, 'Assert succeeded!');
	}
	@isTest
	public static void testExecute2(){
		Id idRTId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_IDENTITY_VERIFICATION).getRecordTypeId();
		Contact con = [SELECT Id FROM Contact WHERE Email = 'test@test.com'];
		Case idCase = new Case();
		idCase.RecordTypeId = idRTId;
		idCase.ContactId = con.Id;
		INSERT idCase;
		Id assetRTId = Schema.SObjectType.Asset.getRecordTypeInfosByDeveloperName().get(Constants.ASSET_RECORD_TYPE_IDENTITY).getRecordTypeId();
		Asset asst = new Asset();
		asst.recordTypeId = assetRTId;
		asst.Name = 'ID Form Template';
		asst.ContactId = con.Id;
		asst.Type__c = Constants.ASSET_TYPE_IDENTITY_VERIFICATION;
		asst.Case__c = idCase.Id;
		asst.Status = Constants.ASSET_STATUS_IN_PROGRESS;
		asst.Azure_Storage_URL__c = 'https://ecfmglocal001.blob.core.windows.net/sfdc-applicant-documents/00317000012ldOVAAY_New_Service_Template_2021-5-31_6_43_29.pdf';
		INSERT asst;
		cadmus_core.DocGenerationWrapper wrapper = new cadmus_core.DocGenerationWrapper();
		wrapper.response = new cadmus_core.CadmusHttpResponse();
		wrapper.response.base64 = Blob.valueOf('Test');
		Test.startTest();
		Test.setMock(HttpCalloutMock.class, new MockHttpResponseGenerator_UploadDocument());
		Actionable_UploadDocumentToAzureBlob action = new Actionable_UploadDocumentToAzureBlob();
		action.execute(new cadmus_core__Actionable__c(), null, idCase.Id, new Map<String, Object> (), new cadmus_core.ConvertController.ConvertDataModel(), wrapper);
		Test.stopTest();
		System.assert([SELECT Id, Azure_Storage_URL__c FROM Asset WHERE Name = 'ID Form Template'
			AND ContactId =: idCase.ContactId AND Case__c =: idCase.Id
		][0].Azure_Storage_URL__c != null, 'Assert succeeded!');
	}
    @isTest
	public static void methodToCoverEpicReportCaseLogic(){
		Id epicRecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_EPIC_VER_REPORT_REQUEST).getRecordTypeId();
		Account acc = new Account();
        acc.Name = 'Test Account';
        acc.BillingCountry = 'India';
        Insert acc;
        Contact con = [SELECT Id FROM Contact WHERE Email = 'test@test.com'];
		Case idCase = new Case();
        idCase.Internal_Status__c = 'Sent';
		idCase.RecordTypeId = epicRecordTypeId;
		idCase.ContactId = con.Id;
        idCase.AccountId = acc.Id;
		INSERT idCase;
		System.assert(idCase.Id != null, 'Fail to insert case Record!');
		cadmus_core.DocGenerationWrapper wrapper = new cadmus_core.DocGenerationWrapper();
		wrapper.response = new cadmus_core.CadmusHttpResponse();
		wrapper.response.base64 = Blob.valueOf('Test');
		Test.startTest();
		Test.setMock(HttpCalloutMock.class, new MockHttpResponseGenerator_UploadDocument());
		Actionable_UploadDocumentToAzureBlob action = new Actionable_UploadDocumentToAzureBlob();
		action.execute(new cadmus_core__Actionable__c(), null, idCase.Id, new Map<String, Object> (), new cadmus_core.ConvertController.ConvertDataModel(), wrapper);
		Test.stopTest();
	}
	@isTest
	public static void testExecutePIATemplate(){
		Id idRTId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_ENTITY_USER_REQUEST).getRecordTypeId();			
		cadmus_core__Doc_Config__c docConfig = new cadmus_core__Doc_Config__c();
        docConfig.Name = PIA_TEMPLATE;
		docConfig.cadmus_core__CustomerDocumentConfigId__c = '4d1e7dfe-68c0-4b85-83eb-43ca6f7de7a0';
		insert docConfig;
		Contact con = [SELECT Id FROM Contact WHERE Email = 'test@test.com'];
		Case idCase = new Case();
		idCase.RecordTypeId = idRTId;
		idCase.ContactId = con.Id;
		INSERT idCase;
		Id assetRTId = Schema.SObjectType.Asset.getRecordTypeInfosByDeveloperName().get(Constants.ASSET_RECORD_TYPE_ENTITY_DOCUMENT_DEVNAME).getRecordTypeId();
		Asset asst = new Asset();
		asst.recordTypeId = assetRTId;
		asst.Name = Constants.ASSET_TYPE_PIA_TEMPLATE;
		asst.ContactId = con.Id;
		asst.Type__c = Constants.ASSET_TYPE_PIA_TEMPLATE;
		asst.Case__c = idCase.Id;
		asst.Status = Constants.ASSET_STATUS_IN_PROGRESS;
		asst.Azure_Storage_URL__c = 'https://ecfmglocal001.blob.core.windows.net/sfdc-applicant-documents/00317000012ldOVAAY_New_Service_Template_2021-5-31_6_43_29.pdf';
		INSERT asst;
		cadmus_core.DocGenerationWrapper wrapper = new cadmus_core.DocGenerationWrapper();
		wrapper.response = new cadmus_core.CadmusHttpResponse();
        wrapper.response.base64 = Blob.valueOf('Test');
		Test.startTest();
		Test.setMock(HttpCalloutMock.class, new MockHttpResponseGenerator_UploadDocument());
		Actionable_UploadDocumentToAzureBlob action = new Actionable_UploadDocumentToAzureBlob();
		action.execute(new cadmus_core__Actionable__c(), docConfig.id, idCase.Id, new Map<String, Object> (), new cadmus_core.ConvertController.ConvertDataModel(), wrapper);
		Test.stopTest();
		EntityServiceRequestSharingDisabled.getPiaTemplateID();
		System.assert([SELECT Id, Azure_Storage_URL__c FROM Asset WHERE Name =: Constants.ASSET_TYPE_PIA_TEMPLATE AND ContactId =: idCase.ContactId AND Case__c =: idCase.Id][0].Azure_Storage_URL__c != null, 'PIA Template Assert Failed to Create!');
	}
	@isTest
	public static void testExecuteNewServiceTemplate(){
		Id idRTId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_ENTITY_USER_REQUEST).getRecordTypeId();
		cadmus_core__Doc_Config__c docConfig = new cadmus_core__Doc_Config__c();
        docConfig.Name = NEW_SERVICE_TEMPLATE;
        docConfig.cadmus_core__CustomerDocumentConfigId__c = '6e0e2af4-965e-4718-839f-25aa3f3247ef';
		insert docConfig;
		Contact con = [SELECT Id FROM Contact WHERE Email = 'test@test.com'];
		Case idCase = new Case();
		idCase.RecordTypeId = idRTId;
		idCase.ContactId = con.Id;
		idCase.Internal_Status__c = Constants.CASE_STATUS_PENDING_NEW_SERVICE;
        INSERT idCase;
        Case idCase2 = new Case();
		idCase2.RecordTypeId = idRTId;
		idCase2.ContactId = con.Id;
		idCase2.Internal_Status__c = Constants.CASE_STATUS_PENDING_NEW_SERVICE;
        INSERT idCase2;
        Service__c service = new Service__c();
        service.Name = 'Performance Data';
        insert service;
        Case2Service__c c2s = new Case2Service__c();
        c2s.Service__c = service.Id;
        c2s.Case__c = idCase2.Id;
        Insert c2s;
		Id assetRTId = Schema.SObjectType.Asset.getRecordTypeInfosByDeveloperName().get(Constants.ASSET_RECORD_TYPE_ENTITY_DOCUMENT_DEVNAME).getRecordTypeId();		
        Asset asst = new Asset(
			Name = Constants.ASSET_TYPE_NEW_SERVICE_TEMPLATE,
			RecordTypeId = assetRTId,
			Status = Constants.ASSET_STATUS_IN_PROGRESS,
			ContactId = con.Id,
			Type__c = Constants.ASSET_TYPE_NEW_SERVICE_TEMPLATE,
			Case__c = idCase.Id,
			Azure_Storage_URL__c = 'https://ecfmglocal001.blob.core.windows.net/sfdc-applicant-documents/00317000012ldOVAAY_New_Service_Template_2021-5-31_6_43_29.pdf');
		INSERT asst;
		cadmus_core.DocGenerationWrapper wrapper = new cadmus_core.DocGenerationWrapper();
		wrapper.response = new cadmus_core.CadmusHttpResponse();
        wrapper.response.base64 = Blob.valueOf('Test');
		Test.startTest();
		Test.setMock(HttpCalloutMock.class, new MockHttpResponseGenerator_UploadDocument());
		Actionable_UploadDocumentToAzureBlob action = new Actionable_UploadDocumentToAzureBlob();
        action.execute(new cadmus_core__Actionable__c(), docConfig.id, idCase.Id, new Map<String, Object> (), new cadmus_core.ConvertController.ConvertDataModel(), wrapper);
        action.execute(new cadmus_core__Actionable__c(), docConfig.id, idCase2.Id, new Map<String, Object> (), new cadmus_core.ConvertController.ConvertDataModel(), wrapper);
		Test.stopTest();
		EntityServiceRequestSharingDisabled.getNewServiceTemplateID(NEW_SERVICE_TEMPLATE);
		System.assert([SELECT Id, Azure_Storage_URL__c FROM Asset WHERE Name =: Constants.ASSET_TYPE_NEW_SERVICE_TEMPLATE AND ContactId =: idCase.ContactId AND Case__c =: idCase.Id][0].Azure_Storage_URL__c != null, 'New Service Template Assert Failed to Create!');
	}
	@isTest
	public static void testExecuteNonUSMLETranscript(){
		Id idRTId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_NON_USMLE_TRANSCRIPT).getRecordTypeId();
		cadmus_core__Doc_Config__c docConfig = new cadmus_core__Doc_Config__c();
		docConfig.Name = 'Non-USMLE Transcript';
		insert docConfig;
		Contact con = [SELECT Id FROM Contact WHERE Email = 'test@test.com'];
		Case idCase = new Case();
		idCase.RecordTypeId = idRTId;
		idCase.ContactId = con.Id;
		INSERT idCase;
		Id assetRTId = Schema.SObjectType.Asset.getRecordTypeInfosByDeveloperName().get(Constants.ASSET_RECORD_TYPE_SCORE_REPORT).getRecordTypeId();		
		Asset asst = new Asset();
		asst.recordTypeId = assetRTId;
		asst.Name = Constants.ASSET_TYPE_NON_USMLE_TRANSCRIPT;
		asst.ContactId = con.Id;
		asst.Type__c = Constants.ASSET_TYPE_NON_USMLE_TRANSCRIPT;
		asst.Case__c = idCase.Id;
		asst.Status = Constants.ASSET_STATUS_IN_PROGRESS;
		asst.Azure_Storage_URL__c = 'https://ecfmglocal001.blob.core.windows.net/sfdc-applicant-documents/00317000012ldOVAAY_New_Service_Template_2021-5-31_6_43_29.pdf';
		INSERT asst;
		cadmus_core.DocGenerationWrapper wrapper = new cadmus_core.DocGenerationWrapper();
		wrapper.response = new cadmus_core.CadmusHttpResponse();
		wrapper.response.base64 = Blob.valueOf('Test');
		Test.startTest();
		Test.setMock(HttpCalloutMock.class, new MockHttpResponseGenerator_UploadDocument());
		Actionable_UploadDocumentToAzureBlob action = new Actionable_UploadDocumentToAzureBlob();
		action.execute(new cadmus_core__Actionable__c(), null, idCase.Id, new Map<String, Object> (), new cadmus_core.ConvertController.ConvertDataModel(), wrapper);
		Test.stopTest();
		System.assert([SELECT Id, Azure_Storage_URL__c FROM Asset WHERE Name =: Constants.ASSET_TYPE_NON_USMLE_TRANSCRIPT AND ContactId =: idCase.ContactId AND Case__c =: idCase.Id][0].Azure_Storage_URL__c != null, 'Non USMLE Transscript Assert Failed to Create!');
	}
	@isTest
	public static void testExecuteEnrReVerTemplate(){
		Id idRTId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_ENROLLMENT_REVERIFICATION).getRecordTypeId();
		cadmus_core__Doc_Config__c docConfig = new cadmus_core__Doc_Config__c();
		docConfig.Name = 'EnrollReverification Case Template';
		docConfig.cadmus_core__CustomerDocumentConfigId__c = '46b34380-9e1a-4401-a102-07ec5d4d66ad';
		insert docConfig;
		cadmus_core__Doc_Config__c docConfig5 = new cadmus_core__Doc_Config__c();
		docConfig5.Name = 'EV Case Template';
		docConfig5.cadmus_core__CustomerDocumentConfigId__c = '451ce5c1-31da-4d30-a6a8-62623c7194e4';
		insert docConfig5;
		cadmus_core__Doc_Config__c docConfig2 = new cadmus_core__Doc_Config__c();
		docConfig2.Name = PIA_TEMPLATE;
		docConfig2.cadmus_core__CustomerDocumentConfigId__c = '4d1e7dfe-68c0-4b85-83eb-43ca6f7de7a0';
		insert docConfig2;
		cadmus_core__Doc_Config__c docConfig3 = new cadmus_core__Doc_Config__c();
		docConfig3.Name = NEW_SERVICE_TEMPLATE;
		insert docConfig3;
		cadmus_core__Doc_Config__c docConfig4 = new cadmus_core__Doc_Config__c();
		docConfig4.Name = 'Non-USMLE Transcript';
		docConfig4.cadmus_core__CustomerDocumentConfigId__c = '5288cdac-883d-4a8f-aab7-edccbcef915a';
		insert docConfig4;
		cadmus_core__Doc_Config__c docConfig6 = new cadmus_core__Doc_Config__c();
		docConfig6.Name = ENROLLMENT_REVERIFICATION_DEFICIENCY_COVER_LETTER;
		docConfig6.cadmus_core__CustomerDocumentConfigId__c = '6aea4ece-45c7-4b74-a5d5-b0c30805b212';
		insert docConfig6;
		cadmus_core__Doc_Config__c docConfig7 = new cadmus_core__Doc_Config__c();
		docConfig7.Name = 'EnrollReverification Cover Letter';
		docConfig7.cadmus_core__CustomerDocumentConfigId__c = '9a5f958e-e9d4-4fea-8b4a-11d1aee78235';
		insert docConfig7;
		cadmus_core__Doc_Config__c docConfig8 = new cadmus_core__Doc_Config__c();
		docConfig8.Name = 'USMLE Transcript';
		docConfig8.cadmus_core__CustomerDocumentConfigId__c = '8c4fc17b-52b1-4ede-84d6-467a21473311';
		insert docConfig8;
		cadmus_core__Doc_Config__c docConfig9 = new cadmus_core__Doc_Config__c();
		docConfig9.Name = 'EIF Doc Config';
		docConfig9.cadmus_core__CustomerDocumentConfigId__c = 'ac1dd94a-5db1-4d8e-8598-3a9056cfe2d8';
		insert docConfig9;
		Contact con = [SELECT Id FROM Contact WHERE Email = 'test@test.com'];
		Account acc = new Account();
		acc.Name = TEST_ACCOUNT;
		acc.BillingStreet = 'Test Street';
		acc.BillingCity = 'Test City';
		acc.BillingState = 'Tamil Nadu';
		acc.BillingCountry = 'India';
		acc.BillingPostalCode = '4567';
		INSERT acc;
		Id idRTAssetId = Schema.SObjectType.Asset.getRecordTypeInfosByDeveloperName().get(Constants.ASSET_RECORD_TYPE_IDENTITY).getRecordTypeId();
		Asset newAsset = new Asset(Name = 'Photo', Type__c = 'Photo', Status = 'Verified', ContactId = con.Id, RecordTypeId = idRTAssetId);
		insert newAsset;
		System.assert(newAsset.Id != NULL, 'Asset creation failed.');
		Case idCase = new Case();
		idCase.RecordTypeId = idRTId;
		idCase.ContactId = con.Id;
		idCase.AccountId = acc.Id;
		idCase.Internal_Status__c = 'New';
		INSERT idCase;
		System.assert(idCase.Id != NULL, 'Case creation failed.');
		Id assetRTId = Schema.SObjectType.Asset.getRecordTypeInfosByDeveloperName().get(Constants.ASSET_RECORD_TYPE_ENROLLMENT_VERIFICATION).getRecordTypeId();
		Asset asst = new Asset();
		asst.recordTypeId = assetRTId;
		asst.Name = Constants.ASSET_TYPE_ENROLLMENT_REVERIFICATION;
		asst.ContactId = con.Id;
		asst.Type__c = Constants.ASSET_TYPE_ENROLLMENT_REVERIFICATION;
		asst.Case__c = idCase.Id;
		asst.Status = Constants.ASSET_STATUS_IN_PROGRESS;
		asst.Azure_Storage_URL__c = 'https://ecfmglocal001.blob.core.windows.net/sfdc-applicant-documents/00317000012ldOVAAY_New_Service_Template_2021-5-31_6_43_29.pdf';
		INSERT asst;
		cadmus_core.DocGenerationWrapper wrapper = new cadmus_core.DocGenerationWrapper();
		wrapper.response = new cadmus_core.CadmusHttpResponse();
		wrapper.response.base64 = Blob.valueOf('Test');
		Test.startTest();
		Test.setMock(HttpCalloutMock.class, new MockHttpResponseGenerator_UploadDocument());
		Actionable_UploadDocumentToAzureBlob action = new Actionable_UploadDocumentToAzureBlob();
		action.execute(new cadmus_core__Actionable__c(), null, idCase.Id, new Map<String, Object> (), new cadmus_core.ConvertController.ConvertDataModel(), wrapper);
		Test.stopTest();
		System.assert([SELECT Id, Azure_Storage_URL__c FROM Asset WHERE Name =: Constants.ASSET_TYPE_ENROLLMENT_REVERIFICATION AND ContactId =: idCase.ContactId AND Case__c =: idCase.Id][0].Azure_Storage_URL__c != null, ASSERT_FAILED_WARNING);
	}
	@isTest
	public static void testUSMLETranscript(){
		Id usmleRTId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_USMLE_TRANSCRIPT).getRecordTypeId();
		cadmus_core__Doc_Config__c docConfig = new cadmus_core__Doc_Config__c();
		docConfig.Name = 'USMLE Transcript';
		insert docConfig;
		Contact con = [SELECT Id FROM Contact WHERE Email = 'test@test.com'];
		Case usmleCase = new Case();
		usmleCase.RecordTypeId = usmleRTId;
		usmleCase.ContactId = con.Id;
		INSERT usmleCase;
		Id assetRTId = Schema.SObjectType.Asset.getRecordTypeInfosByDeveloperName().get(Constants.ASSET_RECORD_TYPE_SCORE_REPORT).getRecordTypeId();
		Asset asst = new Asset();
		asst.recordTypeId = assetRTId;
		asst.Name = Constants.ASSET_TYPE_USMLE_TRANSCRIPT;
		asst.ContactId = con.Id;
		asst.Type__c = Constants.ASSET_TYPE_USMLE_TRANSCRIPT;
		asst.Case__c = usmleCase.Id;
		asst.Status = Constants.ASSET_STATUS_IN_PROGRESS;
		asst.Azure_Storage_URL__c = 'https://ecfmglocal001.blob.core.windows.net/sfdc-applicant-documents/00317000012ldOVAAY_New_Service_Template_2021-5-31_6_43_29.pdf';
		INSERT asst;
		cadmus_core.DocGenerationWrapper wrapper = new cadmus_core.DocGenerationWrapper();
		wrapper.response = new cadmus_core.CadmusHttpResponse();
		wrapper.response.base64 = Blob.valueOf('Test');
		Test.startTest();
		Test.setMock(HttpCalloutMock.class, new MockHttpResponseGenerator_UploadDocument());
		Actionable_UploadDocumentToAzureBlob action = new Actionable_UploadDocumentToAzureBlob();
		action.execute(new cadmus_core__Actionable__c(), null, usmleCase.Id, new Map<String, Object> (), new cadmus_core.ConvertController.ConvertDataModel(), wrapper);
		Test.stopTest();
		System.assert([SELECT Id, Azure_Storage_URL__c FROM Asset WHERE Name =: Constants.ASSET_TYPE_USMLE_TRANSCRIPT AND ContactId =: usmleCase.ContactId AND Case__c =: usmleCase.Id][0].Azure_Storage_URL__c != null, 'Assert Failed to Create!');
	}
	@isTest
	public static void testScoreRecheckLetter(){
		Id srRTId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_SCORE_RECHECK).getRecordTypeId();
		cadmus_core__Doc_Config__c docConfig = new cadmus_core__Doc_Config__c();
		docConfig.Name = 'Score Recheck Letter';
		insert docConfig;
		Contact con = [SELECT Id FROM Contact WHERE Email = 'test@test.com'];
		Case srCase = new Case();
		srCase.RecordTypeId = srRTId;
		srCase.ContactId = con.Id;
		INSERT srCase;
		Id assetRTId = Schema.SObjectType.Asset.getRecordTypeInfosByDeveloperName().get(Constants.ASSET_RECORD_TYPE_EXAM_REG).getRecordTypeId();		
		Asset asst = new Asset();
		asst.recordTypeId = assetRTId;
		asst.Name = Constants.ASSET_TYPE_SCORE_RECHECK_LETTER;
		asst.ContactId = con.Id;
		asst.Type__c = Constants.ASSET_TYPE_SCORE_RECHECK_LETTER;
		asst.Case__c = srCase.Id;
		asst.Status = Constants.ASSET_STATUS_IN_PROGRESS;
		asst.Azure_Storage_URL__c = 'https://ecfmglocal001.blob.core.windows.net/sfdc-applicant-documents/00317000012ldOVAAY_New_Service_Template_2021-5-31_6_43_29.pdf';
		INSERT asst;
		cadmus_core.DocGenerationWrapper wrapper = new cadmus_core.DocGenerationWrapper();
		wrapper.response = new cadmus_core.CadmusHttpResponse();
		wrapper.response.base64 = Blob.valueOf('Test');
		Test.startTest();
		Test.setMock(HttpCalloutMock.class, new MockHttpResponseGenerator_UploadDocument());
		Actionable_UploadDocumentToAzureBlob action = new Actionable_UploadDocumentToAzureBlob();
		action.execute(new cadmus_core__Actionable__c(), null, srCase.Id, new Map<String, Object> (), new cadmus_core.ConvertController.ConvertDataModel(), wrapper);
		Test.stopTest();
		System.assert([SELECT Id, Azure_Storage_URL__c FROM Asset WHERE Name =: Constants.ASSET_TYPE_SCORE_RECHECK_LETTER AND ContactId =: srCase.ContactId AND Case__c =: srCase.Id][0].Azure_Storage_URL__c != null, 'Assert Failed to Create!');
	}
	@isTest
	public static void testExecuteEnrReVerDeficiency() {
		Id idRTId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_ENROLLMENT_REVERIFICATION).getRecordTypeId();
		Id idAssetRTId = Schema.SObjectType.Asset.getRecordTypeInfosByDeveloperName().get(Constants.ASSET_RECORD_TYPE_ENROLLMENT_VERIFICATION).getRecordTypeId();
		cadmus_core__Doc_Config__c docConfig = new cadmus_core__Doc_Config__c();
		docConfig.Name = ENROLLMENT_REVERIFICATION_DEFICIENCY_COVER_LETTER;
		docConfig.cadmus_core__CustomerDocumentConfigId__c = '6aea4ece-45c7-4b74-a5d5-b0c30805b212';
		insert docConfig;
		System.assertEquals(docConfig.Name, ENROLLMENT_REVERIFICATION_DEFICIENCY_COVER_LETTER, 'cadmus_core__Doc_Config__c is not created');
		Contact con = [SELECT Id FROM Contact WHERE Email = 'test@test.com'];
		Case idCase = new Case();
		idCase.RecordTypeId = idRTId;
		idCase.ContactId = con.Id;
		idCase.Internal_Status__c = Constants.CASE_STATUS_ENROLLMENT_VERIFICATION_INCOMPLETE;
		INSERT idCase;
		System.assertEquals(idCase.ContactId, con.Id, 'Case is not created');
		Id assetRTId = Schema.SObjectType.Asset.getRecordTypeInfosByDeveloperName().get(Constants.ASSET_RECORD_TYPE_ENROLLMENT_VERIFICATION).getRecordTypeId();		
		Asset asst = new Asset();
		asst.recordTypeId = assetRTId;
		asst.Name = Constants.ASSET_NAME_COVER_LETTER;
		asst.ContactId = con.Id;
		asst.Type__c = Constants.ASSET_TYPE_COVER_LETTER;
		asst.Case__c = idCase.Id;
		asst.Status = Constants.ASSET_STATUS_IN_PROGRESS;
		asst.Azure_Storage_URL__c = 'https://ecfmglocal001.blob.core.windows.net/sfdc-applicant-documents/00317000012ldOVAAY_New_Service_Template_2021-5-31_6_43_29.pdf';
		INSERT asst;
		Asset asst1 = new Asset(
			RecordTypeId = idAssetRTId,
			Name = Constants.ASSET_TYPE_ENROLLMENT_REVERIFICATION,
			Status = Constants.ASSET_STATUS_IN_PROGRESS,
			ContactId = con.Id,
			Type__c = Constants.ASSET_TYPE_ENROLLMENT_REVERIFICATION,
			Case__c = idCase.Id,
			Azure_Storage_URL__c = 'https://ecfmglocal001.blob.core.windows.net/sfdc-applicant-documents/00317000012ldOVAAY_New_Service_Template_2021-5-31_6_43_29.pdf');
		INSERT asst1;
		System.assertEquals(asst1.Name, Constants.ASSET_TYPE_ENROLLMENT_REVERIFICATION, 'Asset is not created');
		cadmus_core.DocGenerationWrapper wrapper = new cadmus_core.DocGenerationWrapper();
		wrapper.response = new cadmus_core.CadmusHttpResponse();
		wrapper.response.base64 = Blob.valueOf('Test');
		Test.startTest();
		Test.setMock(HttpCalloutMock.class, new MockHttpResponseGenerator_UploadDocument());
		Actionable_UploadDocumentToAzureBlob action = new Actionable_UploadDocumentToAzureBlob();
		action.execute(new cadmus_core__Actionable__c(), null, idCase.Id, new Map<String, Object> (), new cadmus_core.ConvertController.ConvertDataModel(), wrapper);
		Test.stopTest();
		System.assert([SELECT Id, Azure_Storage_URL__c FROM Asset WHERE Name =: Constants.ASSET_NAME_COVER_LETTER AND ContactId =: idCase.ContactId AND Case__c =: idCase.Id][0].Azure_Storage_URL__c != null, ASSERT_FAILED_WARNING);
	}
	@isTest
	public static void testExecuteEnrReVerCoverLetter(){
		Id idRTId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_ENROLLMENT_REVERIFICATION).getRecordTypeId();
		cadmus_core__Doc_Config__c docConfig1 = new cadmus_core__Doc_Config__c();
		docConfig1.Name = 'EnrollReverification Case Template';
		docConfig1.cadmus_core__CustomerDocumentConfigId__c = '46b34380-9e1a-4401-a102-07ec5d4d66ad';
		insert docConfig1;
		cadmus_core__Doc_Config__c docConfig = new cadmus_core__Doc_Config__c();
		docConfig.Name = 'EnrollReverification Cover Letter';
		docConfig.cadmus_core__CustomerDocumentConfigId__c = '9a5f958e-e9d4-4fea-8b4a-11d1aee78235';
		insert docConfig;
		System.assert(docConfig.Id != NULL, 'DocConfig creation failed.');
		Contact con = [SELECT Id FROM Contact WHERE Email = 'test@test.com'];
		Account acc = new Account();
		acc.Name = TEST_ACCOUNT;
		acc.BillingStreet = 'Test Street';
		acc.BillingCity = 'Test City';
		acc.BillingState = 'Tamil Nadu';
		acc.BillingCountry = 'India';
		acc.BillingPostalCode = '4567';
		INSERT acc;
		Case idCase = new Case();
		idCase.RecordTypeId = idRTId;
		idCase.ContactId = con.Id;
		idCase.AccountId = acc.Id;
		idCase.Internal_Status__c = 'New';
		INSERT idCase;
        System.assert(idCase.Id != NULL, 'Case creation failed.');
        Id idRTAssetId = Schema.SObjectType.Asset.getRecordTypeInfosByDeveloperName().get(Constants.ASSET_RECORD_TYPE_IDENTITY).getRecordTypeId();
		Asset newAsset = new Asset(Name = 'Photo', Type__c = Constants.ASSET_TYPE_ENROLLMENT_REVERIFICATION, Status = 'In Progress', ContactId = con.Id, RecordTypeId = idRTAssetId, Case__c = idCase.Id, Azure_Storage_URL__c = 'https://ecfmglocal001.blob.core.windows.net/sfdc-applicant-documents/00317000012ldOVAAY_New_Service_Template_2021-5-31_6_43_29.pdf');
		insert newAsset;
		Asset newAsset1 = new Asset(Name = Constants.ASSET_NAME_ENREV_COVER_LETTER, Type__c = Constants.ASSET_TYPE_ENROLLMENT_REVERIFICATION, Status = 'In Progress', ContactId = con.Id, RecordTypeId = idRTAssetId, Case__c = idCase.Id, Azure_Storage_URL__c = 'https://ecfmglocal001.blob.core.windows.net/sfdc-applicant-documents/00317000012ldOVAAY_New_Service_Template_2021-5-31_6_43_29.pdf');
		insert newAsset1;
		System.assert(newAsset.Id != NULL, 'Asset creation failed.');
		cadmus_core.DocGenerationWrapper wrapper = new cadmus_core.DocGenerationWrapper();
		wrapper.response = new cadmus_core.CadmusHttpResponse();
		wrapper.response.base64 = Blob.valueOf('Test');
		Test.startTest();
		Test.setMock(HttpCalloutMock.class, new MockHttpResponseGenerator_UploadDocument());
		Actionable_UploadDocumentToAzureBlob action = new Actionable_UploadDocumentToAzureBlob();
		action.execute(new cadmus_core__Actionable__c(), docConfig.Id, idCase.Id, new Map<String, Object> (), new cadmus_core.ConvertController.ConvertDataModel(), wrapper);
		Test.stopTest();
		System.assert([SELECT Id, Azure_Storage_URL__c FROM Asset WHERE Name =: Constants.ASSET_NAME_ENREV_COVER_LETTER AND ContactId =: idCase.ContactId AND Case__c =: idCase.Id][0].Azure_Storage_URL__c != null, ASSERT_FAILED_WARNING);
	}
	@isTest
    public static void testUploadDuplEcfmgCert(){
		Id dcRTId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_DUPLICATE_CERTIFICATE).getRecordTypeId();
		cadmus_core__Doc_Config__c docConfig = new cadmus_core__Doc_Config__c();
		docConfig.Name = 'Duplicate ECFMG Certificate';
		insert docConfig;
		Contact con = [SELECT Id FROM Contact WHERE Email = 'test@test.com'];
		Case dcCase = new Case();
		dcCase.RecordTypeId = dcRTId;
		dcCase.ContactId = con.Id;
		dcCase.Internal_Status__c = 'Pending Print';
		INSERT dcCase;
		Id assetRTId = Schema.SObjectType.Asset.getRecordTypeInfosByDeveloperName().get(Constants.ASSET_RECORD_TYPE_ECFMG_CERTIFICATION).getRecordTypeId();		
		Asset asst = new Asset();
		asst.recordTypeId = assetRTId;
		asst.Name = Constants.ASSET_TYPE_DUPLICATE_ECFMG_CERTIFICATE;
		asst.ContactId = con.Id;
		asst.Type__c = Constants.ASSET_TYPE_DUPLICATE_ECFMG_CERTIFICATE;
		asst.Case__c = dcCase.Id;
		asst.Status = Constants.ASSET_STATUS_IN_PROGRESS;
		asst.Azure_Storage_URL__c = 'https://ecfmglocal001.blob.core.windows.net/sfdc-applicant-documents/00317000012ldOVAAY_New_Service_Template_2021-5-31_6_43_29.pdf';
		INSERT asst;
		cadmus_core.DocGenerationWrapper wrapper = new cadmus_core.DocGenerationWrapper();
		wrapper.response = new cadmus_core.CadmusHttpResponse();
		wrapper.response.base64 = Blob.valueOf('Test');
		Test.startTest();
		Test.setMock(HttpCalloutMock.class, new MockHttpResponseGenerator_UploadDocument());
		Actionable_UploadDocumentToAzureBlob action = new Actionable_UploadDocumentToAzureBlob();
		action.execute(new cadmus_core__Actionable__c(), null, dcCase.Id, new Map<String, Object> (), new cadmus_core.ConvertController.ConvertDataModel(), wrapper);
		Test.stopTest();
		System.assert([SELECT Id, Azure_Storage_URL__c FROM Asset WHERE Name =: Constants.ASSET_TYPE_DUPLICATE_ECFMG_CERTIFICATE AND ContactId =: dcCase.ContactId AND Case__c =: dcCase.Id][0].Azure_Storage_URL__c != null, 'Failed to create asset record');
	}
	@isTest
    public static void testUploadEcfmgCertDoc(){
		Id dcRTId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_ECFMG_CERTIFICATION).getRecordTypeId();
		cadmus_core__Doc_Config__c docConfig = new cadmus_core__Doc_Config__c();
		docConfig.Name = 'ECFMG Certificate';
		insert docConfig;
		Contact con = [SELECT Id FROM Contact WHERE Email = 'test@test.com'];
		Case dcCase = new Case();
		dcCase.RecordTypeId = dcRTId;
		dcCase.ContactId = con.Id;
		dcCase.Internal_Status__c = 'Pending Print';
		INSERT dcCase;
		Id assetRTId = Schema.SObjectType.Asset.getRecordTypeInfosByDeveloperName().get(Constants.ASSET_RECORD_TYPE_ECFMG_CERTIFICATION).getRecordTypeId();		
		Asset asst = new Asset();
		asst.recordTypeId = assetRTId;
		asst.Name = Constants.ASSET_TYPE_ECFMG_CERTIFICATE;
		asst.ContactId = con.Id;
		asst.Type__c = Constants.ASSET_TYPE_ECFMG_CERTIFICATE;
		asst.Case__c = dcCase.Id;
		asst.Status = Constants.ASSET_STATUS_IN_PROGRESS;
		asst.Azure_Storage_URL__c = 'https://ecfmglocal001.blob.core.windows.net/sfdc-applicant-documents/00317000012ldOVAAY_New_Service_Template_2021-5-31_6_43_29.pdf';
		INSERT asst;
		cadmus_core.DocGenerationWrapper wrapper = new cadmus_core.DocGenerationWrapper();
		wrapper.response = new cadmus_core.CadmusHttpResponse();
		wrapper.response.base64 = Blob.valueOf('Test');
		Test.startTest();
		Test.setMock(HttpCalloutMock.class, new MockHttpResponseGenerator_UploadDocument());
		Actionable_UploadDocumentToAzureBlob action = new Actionable_UploadDocumentToAzureBlob();
		action.execute(new cadmus_core__Actionable__c(), null, dcCase.Id, new Map<String, Object> (), new cadmus_core.ConvertController.ConvertDataModel(), wrapper);
		Test.stopTest();
		System.assert([SELECT Id, Azure_Storage_URL__c FROM Asset WHERE Name =: Constants.ASSET_TYPE_ECFMG_CERTIFICATE AND ContactId =: dcCase.ContactId AND Case__c =: dcCase.Id][0].Azure_Storage_URL__c != null, 'Failed to create asset');
	}
	@isTest
    public static void testUploadVerificationForm(){
		Id dcRTId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_CREDENTIAL_VERIFICATION).getRecordTypeId();
		Id assetRTId = Schema.SObjectType.Asset.getRecordTypeInfosByDeveloperName().get(Constants.ASSET_RECORD_TYPE_ECFMG_CERTIFICATION).getRecordTypeId();
		cadmus_core__Doc_Config__c docConfig = new cadmus_core__Doc_Config__c();
		docConfig.Name = 'Accepted VerificationForm';
        docConfig.cadmus_core__CustomerDocumentConfigId__c = Constants.DOCCONFIG_CREDVERFORM_ID;
		insert docConfig;
        System.assert(docConfig.Id != NULL, 'DocConfig for verification form creation failed.');
		Contact con = [SELECT Id FROM Contact WHERE Email = 'test@test.com'];
		Case vrCase = new Case();
		vrCase.RecordTypeId = dcRTId;
		vrCase.ContactId = con.Id;
		INSERT vrCase;
        System.assert(vrCase.Id != NULL, 'Credential verification case creation failed.');
		Asset asst = new Asset();
		asst.RecordTypeId = assetRTId;
		asst.Name = Constants.ASSET_TYPE_ECFMG_CERTIFICATE;
		asst.ContactId = con.Id;
		asst.Type__c = Constants.ASSET_TYPE_ECFMG_CERTIFICATE;
		asst.Case__c = vrCase.Id;
		asst.Status = Constants.ASSET_STATUS_IN_PROGRESS;
		asst.Azure_Storage_URL__c = 'https://ecfmglocal001.blob.core.windows.net/sfdc-applicant-documents/00317000012ldOVAAY_New_Service_Template_2021-5-31_6_43_29.pdf';
		INSERT asst;
		cadmus_core.DocGenerationWrapper wrapper = new cadmus_core.DocGenerationWrapper();
		wrapper.response = new cadmus_core.CadmusHttpResponse();
		wrapper.response.base64 = Blob.valueOf('Test');
		Test.startTest();
		Test.setMock(HttpCalloutMock.class, new MockHttpResponseGenerator_UploadDocument());
		Actionable_UploadDocumentToAzureBlob action = new Actionable_UploadDocumentToAzureBlob();
		action.execute(new cadmus_core__Actionable__c(), null, vrCase.Id, new Map<String, Object> (), new cadmus_core.ConvertController.ConvertDataModel(), wrapper);
		Test.stopTest();
		System.assert([SELECT Id, Azure_Storage_URL__c FROM Asset WHERE Name =: Constants.ASSET_TYPE_ECFMG_CERTIFICATE AND ContactId =: vrCase.ContactId AND Case__c =: vrCase.Id][0].Azure_Storage_URL__c != null, 'Failed to create verification form asset');
	}
	@isTest
	public static void testUploadVerificationCoverLetter(){
		Id dcRTId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_CREDENTIAL_VERIFICATION).getRecordTypeId();
		cadmus_core__Doc_Config__c docConfig = new cadmus_core__Doc_Config__c();
		docConfig.Name = 'Verification Cover Letter';
        docConfig.cadmus_core__CustomerDocumentConfigId__c = Constants.DOCCONFIG_CREDVERFORM_ID;
		insert docConfig;
        System.assert(docConfig.Id != NULL, 'DocConfig for verification cover letter creation failed.');
		Contact con = [SELECT Id FROM Contact WHERE Email = 'test@test.com'];
		Case vrCase = new Case();
		vrCase.RecordTypeId = dcRTId;
		vrCase.ContactId = con.Id;
		vrCase.Internal_Status__c = 'Pending Print';
		INSERT vrCase;
        System.assert(vrCase.Id != NULL, 'CredentialVerification case creation failed.');
		Id assetRTId = Schema.SObjectType.Asset.getRecordTypeInfosByDeveloperName().get(Constants.ASSET_RECORD_TYPE_VERIFICATION).getRecordTypeId();
		Asset asst = new Asset();
		asst.recordTypeId = assetRTId;
		asst.Name = Constants.ASSET_NAME_VERIFICATION_COVER_LETTER;
		asst.ContactId = con.Id;
		asst.Type__c = Constants.ASSET_TYPE_COVER_LETTER;
		asst.Case__c = vrCase.Id;
		asst.Status = Constants.ASSET_STATUS_IN_PROGRESS;
		asst.Azure_Storage_URL__c = 'https://ecfmglocal001.blob.core.windows.net/sfdc-applicant-documents/00317000012ldOVAAY_New_Service_Template_2021-5-31_6_43_29.pdf';
		INSERT asst;
		cadmus_core.DocGenerationWrapper wrapper = new cadmus_core.DocGenerationWrapper();
		wrapper.response = new cadmus_core.CadmusHttpResponse();
		wrapper.response.base64 = Blob.valueOf('Test');
		Test.startTest();
		Test.setMock(HttpCalloutMock.class, new MockHttpResponseGenerator_UploadDocument());
		Actionable_UploadDocumentToAzureBlob action = new Actionable_UploadDocumentToAzureBlob();		
		action.uploadVerificationCoverLetter(vrCase.Id,  wrapper.response.base64);
		Test.stopTest();
		System.assert([SELECT Id, Azure_Storage_URL__c FROM Asset WHERE Name =: Constants.ASSET_NAME_VERIFICATION_COVER_LETTER AND ContactId =: vrCase.ContactId AND Case__c =: vrCase.Id][0].Azure_Storage_URL__c != null, 'Failed to create verification cover letter asset');
	}
	@isTest
	public static void testUploadUniversalVerificationForm(){
		Id dcRTId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_CREDENTIAL_VERIFICATION).getRecordTypeId();
		cadmus_core__Doc_Config__c docConfig = new cadmus_core__Doc_Config__c();
		docConfig.Name = 'Universal Verification Form';
        docConfig.cadmus_core__CustomerDocumentConfigId__c = Constants.DOCCONFIG_CREDVERFORM_ID;
		insert docConfig;
        System.assert(docConfig.Id != NULL, 'DocConfig for universal verification form creation failed.');
		Contact con = [SELECT Id,AccountId FROM Contact WHERE Email = 'test@test.com'];
		Case vrCase = new Case();
		vrCase.RecordTypeId = dcRTId;
		vrCase.ContactId = con.Id;
		vrCase.Entity__c = con.AccountId;
		vrCase.Internal_Status__c = Constants.CASE_STATUS_PENDING_REVIEW;
		INSERT vrCase;
        System.assert(vrCase.Id != NULL, 'CredentialVerificationCase creation failed.');
		Id assetRTId = Schema.SObjectType.Asset.getRecordTypeInfosByDeveloperName().get(Constants.ASSET_RECORD_TYPE_VERIFICATION).getRecordTypeId();		
		Asset asst = new Asset();
		asst.recordTypeId = assetRTId;
		asst.Name = Constants.ASSET_NAME_UNIVERSAL_VERIFICATION_FORM;
		asst.ContactId = con.Id;
		asst.Type__c = Constants.ASSET_TYPE_VERIFICATION_FORM;
		asst.Case__c = vrCase.Id;
		asst.Status = Constants.ASSET_STATUS_IN_PROGRESS;
		asst.Azure_Storage_URL__c = 'https://ecfmglocal001.blob.core.windows.net/sfdc-applicant-documents/00317000012ldOVAAY_New_Service_Template_2021-5-31_6_43_29.pdf';
		INSERT asst;
		cadmus_core.DocGenerationWrapper wrapper = new cadmus_core.DocGenerationWrapper();
		wrapper.response = new cadmus_core.CadmusHttpResponse();
		wrapper.response.base64 = Blob.valueOf('Test');
		Test.startTest();
		Test.setMock(HttpCalloutMock.class, new MockHttpResponseGenerator_UploadDocument());
		Actionable_UploadDocumentToAzureBlob action = new Actionable_UploadDocumentToAzureBlob();		
		action.uploadUniversalVerificationForm(vrCase.Id,  wrapper.response.base64);		
		Test.stopTest();
		System.assert([SELECT Id, Azure_Storage_URL__c FROM Asset WHERE Name =: Constants.ASSET_NAME_UNIVERSAL_VERIFICATION_FORM AND ContactId =: vrCase.ContactId AND Case__c =: vrCase.Id][0].Azure_Storage_URL__c != null, 'Failed to create Universal verification form asset');
	}
	@isTest
    public static void testUploadMedEduCoverLetter(){
		Id dcRTId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_MED_EDU_FORM).getRecordTypeId();
		cadmus_core__Doc_Config__c docConfig = new cadmus_core__Doc_Config__c();
		docConfig.Name = 'Medical Education Form Cover Letter - English';
        docConfig.cadmus_core__CustomerDocumentConfigId__c = '86f5103a-64c8-4c7c-82d5-c6d0e7132d33';
		insert docConfig;
        System.assert(docConfig.Id != NULL, 'DocConfig for med edu cover letter creation failed.');
		Contact con = [SELECT Id FROM Contact WHERE Email = 'test@test.com'];
		Case vrCase = new Case();
		vrCase.RecordTypeId = dcRTId;
		vrCase.ContactId = con.Id;
		INSERT vrCase;
        System.assert(vrCase.Id != NULL, 'Med Edu Form case creation failed.');
		Id assetRTId = Schema.SObjectType.Asset.getRecordTypeInfosByDeveloperName().get(Constants.ASSET_RECORD_TYPE_MED_EDU_FORM).getRecordTypeId();		
		Asset asst = new Asset();
		asst.recordTypeId = assetRTId;
		asst.Name = Constants.ASSET_NAME_MED_EDU_COVER;
		asst.ContactId = con.Id;
		asst.Type__c = Constants.ASSET_TYPE_COVER_LETTER;
		asst.Case__c = vrCase.Id;
		asst.Status = Constants.ASSET_STATUS_IN_PROGRESS;
		asst.Azure_Storage_URL__c = 'https://ecfmglocal001.blob.core.windows.net/sfdc-applicant-documents/00317000012ldOVAAY_New_Service_Template_2021-5-31_6_43_29.pdf';
		INSERT asst;
		cadmus_core.DocGenerationWrapper wrapper = new cadmus_core.DocGenerationWrapper();
		wrapper.response = new cadmus_core.CadmusHttpResponse();
		wrapper.response.base64 = Blob.valueOf('Test');
		Test.startTest();
		Test.setMock(HttpCalloutMock.class, new MockHttpResponseGenerator_UploadDocument());
		Actionable_UploadDocumentToAzureBlob action = new Actionable_UploadDocumentToAzureBlob();		
		action.uploadMedEduCoverLetter(vrCase.Id,  wrapper.response.base64);
		Test.stopTest();
		System.assert([SELECT Id, Azure_Storage_URL__c FROM Asset WHERE Name =: Constants.ASSET_NAME_MED_EDU_COVER AND ContactId =: vrCase.ContactId AND Case__c =: vrCase.Id][0].Azure_Storage_URL__c != null, 'Failed to create verification cover letter asset');
	}
	@isTest
	public static void testUploadMedEduForm(){
		Id dcRTId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_MED_EDU_FORM).getRecordTypeId();
		cadmus_core__Doc_Config__c docConfig = new cadmus_core__Doc_Config__c();
		docConfig.Name = 'Medical Education Form - English';
        docConfig.cadmus_core__CustomerDocumentConfigId__c = '264a11ef-a1ea-45c0-8a49-cb0861419ee8';
		insert docConfig;
        System.assert(docConfig.Id != NULL, 'DocConfig for med edu form creation failed.');
		Contact con = [SELECT Id FROM Contact WHERE Email = 'test@test.com'];
		Case vrCase = new Case();
		vrCase.RecordTypeId = dcRTId;
		vrCase.ContactId = con.Id;
		INSERT vrCase;
        System.assert(vrCase.Id != NULL, 'Med Edu Form case creation failed.');
		Id assetRTId = Schema.SObjectType.Asset.getRecordTypeInfosByDeveloperName().get(Constants.ASSET_RECORD_TYPE_MED_EDU_FORM).getRecordTypeId();		
		Asset asst = new Asset();
		asst.recordTypeId = assetRTId;
		asst.Name = Constants.CASE_QUEUE_MED_EDU_FORM;
		asst.ContactId = con.Id;
		asst.Type__c = Constants.CASE_QUEUE_MED_EDU_FORM;
		asst.Case__c = vrCase.Id;
		asst.Status = Constants.ASSET_STATUS_IN_PROGRESS;
		asst.Azure_Storage_URL__c = 'https://ecfmglocal001.blob.core.windows.net/sfdc-applicant-documents/00317000012ldOVAAY_New_Service_Template_2021-5-31_6_43_29.pdf';
		INSERT asst;
		cadmus_core.DocGenerationWrapper wrapper = new cadmus_core.DocGenerationWrapper();
		wrapper.response = new cadmus_core.CadmusHttpResponse();
		wrapper.response.base64 = Blob.valueOf('Test');
		Test.startTest();
		Test.setMock(HttpCalloutMock.class, new MockHttpResponseGenerator_UploadDocument());
		Actionable_UploadDocumentToAzureBlob action = new Actionable_UploadDocumentToAzureBlob();		
		action.uploadMedEduForm(vrCase.Id,  wrapper.response.base64);		
		Test.stopTest();
		System.assert([SELECT Id, Azure_Storage_URL__c FROM Asset WHERE Name =: Constants.CASE_QUEUE_MED_EDU_FORM AND ContactId =: vrCase.ContactId AND Case__c =: vrCase.Id][0].Azure_Storage_URL__c != null, 'Failed to create Universal verification form asset');
	}
	@isTest
	public static void testUploadAttestationForm(){
		Id applRecTypeId = Schema.SObjectType.Contact.getRecordTypeInfosByDeveloperName().get(Constants.CONTACT_RECORD_TYPE_APPLICANT ).getRecordTypeId();
        Account acc = new Account();
        acc.Name = 'Test Account';
        acc.Unique_Medical_School_ID__c = 'TA123';
        acc.BillingCountry = 'United States';
        acc.BillingState = 'New Jersey';
        acc.BillingPostalCode = 'x123';
        INSERT acc;
        System.assert(acc.Id!=null,'Account not created');
        Contact con = new Contact();
        con.AccountId = acc.Id;
        con.LastName = 'Test';
        con.Email = 'test1@test.com';
        con.RecordTypeId = applRecTypeId;
        INSERT con;
        System.assert(con.Id!=null,'Contact not created');
		Id entityRecordType = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get('Entity').getRecordTypeId();
        Account mainAcc = new Account();
        mainAcc.Name = 'UserAccount1';
        mainAcc.RecordTypeId = entityRecordType;
        mainAcc.BillingCountry = 'United States';
        mainAcc.BillingState = 'New Jersey';
        mainAcc.BillingPostalCode = 'x123';
        INSERT mainAcc;
        System.assert(mainAcc.Id!=null,'Entity account not found');
        Id degMedSchRecordTypeId = Schema.SObjectType.Contact_Association_Type__c.getRecordTypeInfosByDeveloperName().get(Constants.CONASCTYPE_RECORD_TYPE_DEGREE_MEDICAL_SCHOOL).getRecordTypeId();
        Contact_Association_Type__c newCats = new Contact_Association_Type__c();
        newCats.Contact__c = con.Id;
        newCats.Account__c = mainAcc.Id;
        newCats.RecordTypeId = degMedSchRecordTypeId;
        INSERT newCats;
        Id appForCerrecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_APP_FOR_CERT).getRecordTypeId();
        Case appForCert = new Case();
        appForCert.RecordTypeId = appForCerrecordTypeId;
        appForCert.ContactId = con.Id;
        appForCert.Internal_Status__c = 'In Review';
        appForCert.AccountId = acc.Id;
        INSERT appForCert;
        System.assert(appForCert.Id!=null,'Case not found');
        Id attestCaserecTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_ATTESTATION).getRecordTypeId();
        Case newCase = new Case();
        newCase.RecordTypeId = attestCaserecTypeId;
        newCase.ContactId = con.Id;
        newCase.AccountId = acc.Id;
        newCase.Internal_Status__c = 'New';
        newCase.Case_Type__c = 'Attestation Case';
        INSERT newCase;
		System.assert(newCase.Id!=null,'Case not created');
		cadmus_core__Doc_Config__c docConfig = new cadmus_core__Doc_Config__c();
		docConfig.Name = 'Attestation Form';
        docConfig.cadmus_core__CustomerDocumentConfigId__c = '0cf224e5-9b65-473e-bc89-0919977ba7cd';
		INSERT docConfig;
        System.assert(docConfig.Id != NULL, 'DocConfig for Attestation Form failed');
		Id assetRTId = Schema.SObjectType.Asset.getRecordTypeInfosByDeveloperName().get(Constants.ASSET_RECORD_TYPE_ATTESTATION).getRecordTypeId();		
		Asset asst = new Asset();
		asst.recordTypeId = assetRTId;
		asst.Name = Constants.ASSET_NAME_ATTESTATION_FORM;
		asst.ContactId = con.Id;
		asst.Type__c = Constants.ASSET_NAME_ATTESTATION_FORM;
		asst.Case__c = newCase.Id;
		asst.Status = Constants.ASSET_STATUS_IN_PROGRESS;
		asst.Azure_Storage_URL__c = 'https://ecfmglocal001.blob.core.windows.net/sfdc-applicant-documents/00317000012ldOVAAY_New_Service_Template_2021-5-31_6_43_29.pdf';
		INSERT asst;
		cadmus_core.DocGenerationWrapper wrapper = new cadmus_core.DocGenerationWrapper();
		wrapper.response = new cadmus_core.CadmusHttpResponse();
		wrapper.response.base64 = Blob.valueOf('Test');
		Test.startTest();
		Test.setMock(HttpCalloutMock.class, new MockHttpResponseGenerator_UploadDocument());
		Actionable_UploadDocumentToAzureBlob action = new Actionable_UploadDocumentToAzureBlob();		
		action.uploadAttestationForm(newCase.Id,  wrapper.response.base64);		
		Test.stopTest();
		System.assert([SELECT Id, Azure_Storage_URL__c FROM Asset WHERE Name =: Constants.ASSET_NAME_ATTESTATION_FORM AND ContactId =: newCase.ContactId AND Case__c =: newCase.Id][0].Azure_Storage_URL__c != null, 'Failed to create Attestation form');
	}
	@IsTest
	public static void testuploadAttestationCVLetter(){
		Id applRecTypeId = Schema.SObjectType.Contact.getRecordTypeInfosByDeveloperName().get(Constants.CONTACT_RECORD_TYPE_APPLICANT ).getRecordTypeId();
        Account acc = new Account();
        acc.Name = 'Test Account';
        acc.Unique_Medical_School_ID__c = 'TA123';
        acc.BillingCountry = 'United States';
        acc.BillingState = 'New Jersey';
        acc.BillingPostalCode = 'x123';
        INSERT acc;
        System.assert(acc.Id!=null,'Account not created');
        Contact con = new Contact();
        con.AccountId = acc.Id;
        con.LastName = 'Test';
        con.Email = 'test1@test.com';
        con.RecordTypeId = applRecTypeId;
        INSERT con;
        System.assert(con.Id!=null,'Contact not created');
		Id entityRecordType = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get('Entity').getRecordTypeId();
        Account mainAcc = new Account();
        mainAcc.Name = 'UserAccount1';
        mainAcc.RecordTypeId = entityRecordType;
        mainAcc.BillingCountry = 'United States';
        mainAcc.BillingState = 'New Jersey';
        mainAcc.BillingPostalCode = 'x123';
        INSERT mainAcc;
        System.assert(mainAcc.Id!=null,'Entity account not found');
        Id degMedSchRecordTypeId = Schema.SObjectType.Contact_Association_Type__c.getRecordTypeInfosByDeveloperName().get(Constants.CONASCTYPE_RECORD_TYPE_DEGREE_MEDICAL_SCHOOL).getRecordTypeId();
        Contact_Association_Type__c newCats = new Contact_Association_Type__c();
        newCats.Contact__c = con.Id;
        newCats.Account__c = mainAcc.Id;
        newCats.RecordTypeId = degMedSchRecordTypeId;
        INSERT newCats;
        Id appForCerrecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_APP_FOR_CERT).getRecordTypeId();
        Case appForCert = new Case();
        appForCert.RecordTypeId = appForCerrecordTypeId;
        appForCert.ContactId = con.Id;
        appForCert.Internal_Status__c = 'In Review';
        appForCert.AccountId = acc.Id;
        INSERT appForCert;
        System.assert(appForCert.Id!=null,'Case not found');
        Id attestCaserecTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_ATTESTATION).getRecordTypeId();
        Case newCase = new Case();
        newCase.RecordTypeId = attestCaserecTypeId;
        newCase.ContactId = con.Id;
        newCase.AccountId = acc.Id;
        newCase.Internal_Status__c = 'New';
        newCase.Case_Type__c = 'Attestation Case';
        INSERT newCase;
		System.assert(newCase.Id!=null,'Case not created');
		cadmus_core__Doc_Config__c docConfig = new cadmus_core__Doc_Config__c();
		docConfig.Name = 'Attestation Cover Letter';
        docConfig.cadmus_core__CustomerDocumentConfigId__c = 'a271453f-74c2-4074-adae-2c8bebcdd9ea';
		INSERT docConfig;
        System.assert(docConfig.Id != NULL, 'DocConfig for Attestation Cover letter failed');
		Id assetRTId = Schema.SObjectType.Asset.getRecordTypeInfosByDeveloperName().get(Constants.ASSET_RECORD_TYPE_ATTESTATION).getRecordTypeId();
		Asset asst = new Asset();
		asst.recordTypeId = assetRTId;
		asst.Name = Constants.ASSET_NAME_ATTESTATION_COVER_LETTER;
		asst.ContactId = con.Id;
		asst.Type__c = Constants.ASSET_TYPE_COVER_LETTER;
		asst.Case__c = newCase.Id;
		asst.Status = Constants.ASSET_STATUS_IN_PROGRESS;
		asst.Azure_Storage_URL__c = 'https://ecfmglocal001.blob.core.windows.net/sfdc-applicant-documents/00317000012ldOVAAY_New_Service_Template_2021-5-31_6_43_29.pdf';
		INSERT asst;
		cadmus_core.DocGenerationWrapper wrapper = new cadmus_core.DocGenerationWrapper();
		wrapper.response = new cadmus_core.CadmusHttpResponse();
		wrapper.response.base64 = Blob.valueOf('Test');
		Test.startTest();
		Test.setMock(HttpCalloutMock.class, new MockHttpResponseGenerator_UploadDocument());
		Actionable_UploadDocumentToAzureBlob action = new Actionable_UploadDocumentToAzureBlob();		
		action.uploadAttestationCVLetter(newCase.Id,  wrapper.response.base64);		
		Test.stopTest();
		System.assert([SELECT Id, Azure_Storage_URL__c FROM Asset WHERE Name =: Constants.ASSET_NAME_ATTESTATION_COVER_LETTER AND ContactId =: newCase.ContactId AND Case__c =: newCase.Id][0].Azure_Storage_URL__c != null, 'Failed to create Attestation Cover Letter');
	}
	@isTest
    public static void testUploadAppforcertSummary(){
		Id appforcertRTId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_APP_FOR_CERT).getRecordTypeId();
		cadmus_core__Doc_Config__c docConfig = new cadmus_core__Doc_Config__c();
		docConfig.Name = 'AppForCert Summary';
        docConfig.cadmus_core__CustomerDocumentConfigId__c = 'a952309c-b76b-4b2c-b151-13f6047ea68f';
		insert docConfig;
        System.assert(docConfig.Id != NULL, 'DocConfig for AppForCert Summary creation failed.');
		Contact con = [SELECT Id,AccountId FROM Contact WHERE Email = 'test@test.com'];
		Case appForCertCase = new Case();
		appForCertCase.RecordTypeId = appforcertRTId;
		appForCertCase.ContactId = con.Id;
		appForCertCase.Internal_Status__c = 'In Review';
		appForCertCase.AccountId = con.AccountId;
		INSERT appForCertCase;
        System.assert(appForCertCase.Id != NULL, 'AppForCert case creation failed.');
		Id assetRTId = Schema.SObjectType.Asset.getRecordTypeInfosByDeveloperName().get(Constants.ASSET_RECORD_TYPE_SUMMARY).getRecordTypeId();		
		Asset asst = new Asset();
		asst.recordTypeId = assetRTId;
		asst.Name = Constants.ASSET_NAME_APPLICATION_FOR_CERTIFICATION_SUMMARY;
		asst.ContactId = con.Id;
		asst.Type__c = Constants.ASSET_TYPE_APPLICATION_SUMMARY;
		asst.Case__c = appForCertCase.Id;
		asst.Status = Constants.ASSET_STATUS_ACCEPTED;
		asst.Azure_Storage_URL__c = 'https://ecfmglocal001.blob.core.windows.net/sfdc-applicant-documents/00317000012ldOVAAY_New_Service_Template_2021-5-31_6_43_29.pdf';
		INSERT asst;
		cadmus_core.DocGenerationWrapper wrapper = new cadmus_core.DocGenerationWrapper();
		wrapper.response = new cadmus_core.CadmusHttpResponse();
		wrapper.response.base64 = Blob.valueOf('Test');
		Test.startTest();
		Test.setMock(HttpCalloutMock.class, new MockHttpResponseGenerator_UploadDocument());
		Actionable_UploadDocumentToAzureBlob action = new Actionable_UploadDocumentToAzureBlob();		
		action.uploadAppForCertSummary(appForCertCase.Id,  wrapper.response.base64);
		Test.stopTest();
	}
	@isTest
    public static void testuploadExamApplicationSummary(){
		Id examRTId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(Constants.CASE_RECORD_TYPE_EXAM_REGISTRATION).getRecordTypeId();
		cadmus_core__Doc_Config__c docConfig = new cadmus_core__Doc_Config__c();
		docConfig.Name = 'Exam Application Summary';
        docConfig.cadmus_core__CustomerDocumentConfigId__c = '8e881571-a49a-475f-9337-af24b05cf568';
		insert docConfig;
        System.assert(docConfig.Id != NULL, 'DocConfig for Exam Application Summary creation failed.');
		Contact con = [SELECT Id,AccountId FROM Contact WHERE Email = 'test@test.com'];
		Case examCase = new Case();
		examCase.RecordTypeId = examRTId;
		examCase.ContactId = con.Id;
		examCase.Internal_Status__c = 'In Review';
		examCase.AccountId = con.AccountId;
		INSERT examCase;
        System.assert(examCase.Id != NULL, 'Exam Application case creation failed.');
		Id assetRTId = Schema.SObjectType.Asset.getRecordTypeInfosByDeveloperName().get(Constants.ASSET_RECORD_TYPE_SUMMARY).getRecordTypeId();		
		Asset asst = new Asset();
		asst.recordTypeId = assetRTId;
		asst.Name = Constants.ASSET_NAME_EXAM_APPLICATION_SUMMARY;
		asst.ContactId = con.Id;
		asst.Type__c = Constants.ASSET_TYPE_APPLICATION_SUMMARY;
		asst.Case__c = examCase.Id;
		asst.Status = Constants.ASSET_STATUS_ACCEPTED;
		asst.Azure_Storage_URL__c = 'https://ecfmglocal001.blob.core.windows.net/sfdc-applicant-documents/00317000012ldOVAAY_New_Service_Template_2021-5-31_6_43_29.pdf';
		INSERT asst;
		cadmus_core.DocGenerationWrapper wrapper = new cadmus_core.DocGenerationWrapper();
		wrapper.response = new cadmus_core.CadmusHttpResponse();
		wrapper.response.base64 = Blob.valueOf('Test');
		Test.startTest();
		Test.setMock(HttpCalloutMock.class, new MockHttpResponseGenerator_UploadDocument());
		Actionable_UploadDocumentToAzureBlob action = new Actionable_UploadDocumentToAzureBlob();		
		action.uploadExamApplicationSummary(examCase.Id,  wrapper.response.base64);
		Test.stopTest();
	}
}