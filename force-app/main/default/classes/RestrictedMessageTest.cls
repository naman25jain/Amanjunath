// This test class checks if there are any restrictions applied on Case/Account/Contact record
@isTest
public class RestrictedMessageTest {
	@testSetup static void setup(){
        CurrentECFMGIDSequence__c curECFMGSetting = CurrentECFMGIDSequence__c.getOrgDefaults();
        curECFMGSetting.ECFMG_ID__c = '00000001';
        upsert curECFMGSetting;
        CurrentEntityIDSequence__c curEntitySetting = CurrentEntityIDSequence__c.getOrgDefaults();
        curEntitySetting.Entity_ID__c = '0000000';
        upsert curEntitySetting;
        BaseTestFactory.getCustomerCommunityPlusUser();
    }
    // This method tests if Account/Contact/Case has any restriction
    @isTest
    static void testGetMessage(){
        string caseCreationFailed = 'CASE CREATION FAILED';
        string billingCountry = 'India';
        string caseIdText = 'caseId';
        Id idAccountTypeId = GenericUtilities.getRecordTypeIdByDevName('Account','Entity');
        List<Account> acctList = new List<Account>();
        Account acct1 = new Account(Name='Entity Account1',RecordTypeId=idAccountTypeId,School__c=true,BillingCountry=BillingCountry,ServicesRestricted__c = 'EPIC Credentials Verification - ' + label.Internal_External);
        acctList.add(acct1);
        Account acct2 = new Account(Name='Entity Account2',RecordTypeId=idAccountTypeId,School__c=true,BillingCountry=BillingCountry);
        acctList.add(acct2);
        INSERT acctList;
        for(Account acc:acctList){
            System.assert(acc.Id!= null,acc.Name+' ACCOUNT CREATION FAILED');
        }        
        system.assert(string.isNotBlank(RestrictedMessage.getMessage('{"accountId":"'+acct1.Id+'"}')), 'Account restriction failed');
		system.assert(string.isBlank(RestrictedMessage.getMessage('{"accountId":"'+acct2.Id+'"}')), 'Account restriction failed');        
        Contact con = [SELECT Id,recordtype.developername FROM Contact LIMIT 1];
        Service__c newSer = new Service__c();
        newSer.Name = Constants.SERVICE_NAME_CREDENTIAL_VERIFICATION;
        Insert newSer;
        System.assert(newSer.Id != null,'Service creation failed');
        Id credVerCaseRecordtypeId = GenericUtilities.getRecordTypeIdByDevName('Case',Constants.CASE_RECORD_TYPE_CREDENTIAL_VERIFICATION);
        Case credVerCase = new Case();
        credVerCase.RecordTypeId = credVerCaseRecordtypeId;
        credVerCase.ContactId = con.Id;
        credVerCase.Service__c = Constants.CASE_SERVICE_EPIC;
        credVerCase.Internal_Status__c = Constants.CASE_STATUS_NEW;
        credVerCase.Entity__c = acct1.Id;
        credVerCase.Alternate_Entity__c = acct1.Id;
        Insert credVerCase;
        System.assert(credVerCase.Id != null,caseCreationFailed);
        Id affCVRecordTypeId = GenericUtilities.getRecordTypeIdByDevName('Affirmation__c',Constants.AFFIRMATION_RECORD_TYPE_CREDENTIAL_VERIFICATION);
        Affirmation__c affirmation = new Affirmation__c();
        affirmation.RecordTypeId = affCVRecordTypeId;
        affirmation.Case__c = credVerCase.Id;
        affirmation.Verify_with_Alternate_Entity__c = false;
        Insert affirmation;
        System.assert(affirmation.Id != null,'Affirmation creation failed');        
        system.assert(string.isNotBlank(RestrictedMessage.getMessage('{"'+caseIdText+'":"'+credVerCase.Id+'"}')),'Entity Credential Verification Case Restriction failed');
        affirmation.Verify_with_Alternate_Entity__c = true;
        update affirmation;
        system.assert(string.isNotBlank(RestrictedMessage.getMessage('{"'+caseIdText+'":"'+credVerCase.Id+'"}')),'Entity Credential Verification Case Restriction failed');
        Id evRecordTypeId = GenericUtilities.getRecordTypeIdByDevName('Case',Constants.CASE_RECORD_TYPE_ENROLLMENT_VERIFICATION);
        Case evCase = new Case();
        evCase.ContactId = con.Id;
        evCase.AccountId = acct2.Id;
        evCase.Internal_Status__c = 'New';
        evCase.RecordTypeId = evRecordTypeId;
        Insert evCase;
        Restriction_Request__c restrict = new Restriction_Request__c();
        restrict.Restriction_Reason__c='Investigation';
        restrict.Restriction_Start_Date__c= system.today();
        restrict.Restriction_Level__c='Entity';
        restrict.Services_Restricted__c='Enrollment Verification';
        restrict.Restriction_Type__c='Internal Only';
        restrict.RestrictionStatus__c='Processing Error';
        restrict.Entity_ID_List__c='["'+acct1.Id+'"]';
        insert restrict;
        system.assert(evCase.Id != null,caseCreationFailed);
        system.assert(string.isBlank(RestrictedMessage.getMessage('{"'+caseIdText+'":"'+evCase.Id+'"}')),'Contact Case Restriction failed');
        acct2.ServicesRestricted__c = 'Enrollment Verification - ' + label.Internal_External;
        update acct2;
        system.assert(string.isNotBlank(RestrictedMessage.getMessage('{"'+caseIdText+'":"'+credVerCase.Id+'"}')),'Account Credential Verification Case Restriction failed');
        con.ServicesRestricted__c = 'EPIC Credentials Verification - ' + label.Internal_External;
        update con;
        List<Restriction__c> resList = new List<Restriction__c>();
        Restriction__c res1=new Restriction__c();
        res1.Restriction_Start_Date__c=system.today();
        res1.Restriction_End_Date__c=Date.newInstance(2022, 02, 28);
        res1.ServiceRestricted__c='ECFMG Certificate';
        res1.Restriction_Status__c='Active';
        res1.Restriction_Request__c=restrict.Id;
        resList.add(res1);
        insert resList;
        system.assert(string.isNotBlank(RestrictedMessage.getMessage('{"contactId":"'+con.Id+'"}')),'Contact restriction not working');
        system.assert(string.isNotBlank(RestrictedMessage.getMessage('{"'+caseIdText+'":"'+credVerCase.Id+'"}')),'Contact Credential Verification Case Restriction failed');
        RestrictedMessage.checkRestrictionRequestStatus('Restriction_Request__c',restrict.Id);
        RestrictionRequestProcess.processRestrictionRecords(resList);
    }
    @isTest
    static void restrictionRequestBatchTest(){
        string errormsg = 'Entity should not be null';
        Account acc=new Account();
        acc.Name='Khambhampati Household';
        acc.BillingCity ='Test';
        acc.BillingState='Texas';
        acc.BillingCountry='United States';
        acc.BillingPostalCode='19110';
        insert acc;
        Contact con=new Contact();
        con.LastName = 'Test';
        con.AccountId = acc.Id;
        con.Email='test@abc.com';
        insert con;
        Restriction_Request__c restrict = new Restriction_Request__c();
        restrict.Restriction_Reason__c='Investigation';
        restrict.Restriction_Start_Date__c= system.today();
        restrict.Restriction_Level__c='Entity';
        restrict.Services_Restricted__c='Enrollment Verification';
        restrict.Restriction_Type__c='Internal and External';
        restrict.RestrictionStatus__c='Ready to Process';
        restrict.Entity_ID_List__c='["'+acc.Id+'"]';
        restrict.Applicant_ID_List__c='["'+con.Id+'"]';
        insert restrict;
        Restriction_Request__c restrictInt = new Restriction_Request__c();
        restrictInt.Restriction_Reason__c='Investigation';
        restrictInt.Restriction_Start_Date__c= system.today();
        restrictInt.Restriction_Level__c='Entity';
        restrictInt.Services_Restricted__c='Enrollment Verification';
        restrictInt.Restriction_Type__c='Internal Only';
        restrictInt.RestrictionStatus__c='Ready to Process';
        restrictInt.Entity_ID_List__c='["'+acc.Id+'"]';
        restrictInt.Applicant_ID_List__c='["'+con.Id+'"]';
        insert restrictInt;
        Restriction_Request__c restrictApp = new Restriction_Request__c();
        restrictApp.Restriction_Reason__c='Investigation';
        restrictApp.Restriction_Start_Date__c= system.today();
        restrictApp.Restriction_Level__c='Applicant';
        restrictApp.Services_Restricted__c='Enrollment Verification';
        restrictApp.Restriction_Type__c='Internal and External';
        restrictApp.RestrictionStatus__c='Ready to Process';
        restrictApp.Entity_ID_List__c='["'+acc.Id+'"]';
        restrictApp.Applicant_ID_List__c='["'+con.Id+'"]';
        insert restrictApp;
        Restriction_Request__c restrictApp1 = new Restriction_Request__c();
        restrictApp1.Restriction_Reason__c='Investigation';
        restrictApp1.Restriction_Start_Date__c= system.today();
        restrictApp1.Restriction_Level__c='Applicant';
        restrictApp1.Services_Restricted__c='Enrollment Verification';
        restrictApp1.Restriction_Type__c='Internal Only';
        restrictApp1.RestrictionStatus__c='Ready to Process';
        restrictApp1.Entity_ID_List__c='["'+acc.Id+'"]';
        restrictApp1.Applicant_ID_List__c='["'+con.Id+'"]';
        insert restrictApp1;
        Restriction__c res=new Restriction__c();
        res.Restriction_Start_Date__c=system.today();
        res.Restriction_End_Date__c=Date.newInstance(2022, 02, 12);
        res.ServiceRestricted__c='ECFMG Certificate';
        res.Restriction_Status__c='Active';
        res.Restriction_Request__c=restrict.Id;
        insert res;
        Restriction__c res1=new Restriction__c();
        res1.Restriction_Start_Date__c=system.today();
        res1.Restriction_End_Date__c=Date.newInstance(2022, 02, 12);
        res1.ServiceRestricted__c='ECFMG Certificate';
        res1.Restriction_Status__c='Active';
        res1.Restriction_Type__c='Internal Only';
        res1.Restriction_Request__c=restrictApp.Id;
        insert res1;
        Test.startTest();
        	RestrictionRequestProcessBatch obj = new RestrictionRequestProcessBatch();
            DataBase.executeBatch(obj); 
        Test.stopTest();
        System.assert(restrict.Entity_ID_List__c != null,errormsg);
        System.assert(restrict.Applicant_ID_List__c != null,errormsg);
    }
    @isTest
    static void restrictionProcessBatchTest(){
        string errormsg = 'Entity should not be null';
        Account acc=new Account();
        acc.Name='Khambhampati Household';
        acc.BillingCity ='Test';
        acc.BillingState='Texas';
        acc.BillingCountry='United States';
        acc.BillingPostalCode='19110';
        insert acc;
        Restriction_Request__c restrict = new Restriction_Request__c();
        restrict.Restriction_Reason__c='Investigation';
        restrict.Restriction_Start_Date__c= system.today();
        restrict.Restriction_Level__c='Entity';
        restrict.Services_Restricted__c='Enrollment Verification';
        restrict.Restriction_Type__c='Internal and External';
        restrict.RestrictionStatus__c='Ready to Process';
        restrict.Entity_ID_List__c='["'+acc.Id+'"]';
        insert restrict;
        Restriction__c res1=new Restriction__c();
        res1.Restriction_Start_Date__c=system.today();
        res1.Restriction_End_Date__c=Date.newInstance(2022, 02, 12);
        res1.ServiceRestricted__c='ECFMG Certificate';
        res1.Restriction_Status__c='Active';
        res1.Restriction_Request__c=restrict.Id;
        insert res1;
        Test.startTest();
    		RestrictionProcessBatch restriction=new RestrictionProcessBatch();
        	DataBase.executeBatch(restriction); 
        Test.stopTest();
        System.assert(restrict.Entity_ID_List__c != null,errormsg);
    }
    @isTest
    static void RestrictionBulkProcessControllerTest(){
        String reportId='00O46000004Smh8EAC';
        string errormsg = 'Entity should not be null';
        Account acc=new Account();
        acc.Name='Khambhampati Household';
        acc.BillingCity ='Test';
        acc.BillingState='Texas';
        acc.BillingCountry='United States';
        acc.BillingPostalCode='19110';
        insert acc;
        Restriction_Request__c restrict = new Restriction_Request__c();
        restrict.Restriction_Reason__c='Investigation';
        restrict.Restriction_Start_Date__c= system.today();
        restrict.Restriction_Level__c='Entity';
        restrict.Services_Restricted__c='Enrollment Verification';
        restrict.Restriction_Type__c='Internal and External';
        restrict.RestrictionStatus__c='Ready to Process';
        restrict.Entity_ID_List__c='["'+acc.Id+'"]';
        restrict.Applicant_ID_List__c='["'+acc.Id+'"]';
        insert restrict;
        System.assert(restrict.Entity_ID_List__c != null,errormsg);
        System.assert(restrict.Applicant_ID_List__c != null,errormsg);
        Test.startTest();
        RestrictionBulkProcessController.SearchRecords('a','Account');
        RestrictionBulkProcessController.SearchRecords('a','Contact');
        RestrictionBulkProcessController.getExstingRowsData(restrict.Id);
        RestrictionBulkProcessController.compareDates(String.valueOf(system.today()),'12/03/2022');
        RestrictionBulkProcessController.compareDates('12/02/2022',String.valueOf(system.today()));
        RestrictionBulkProcessController.updateRestrictionRequest(restrict.Id, 'New');
        RestrictionBulkProcessController.updateRestrictionRequest(restrict.Id, 'Completed');
        RestrictionBulkProcessController.updateRestrictionRequest(restrict.Id, 'Ready to Process');
        RestrictionBulkProcessController.getDataFromReport(reportId, 'Account');
        Test.stopTest();
    }
}