@isTest
public class Contact2AcctServiceTriggerTest extends ECFMGTestFactory{
    public static testMethod void insertTest(){
        test.startTest();
        String email1 = 'testUser@gmail.com';
        String email2 = 'testUser2@gmail.com';
        String email3 = 'testUser3@gmail.com';
        String country = 'America/Los_Angeles';
        String country2 = 'United States';
        Id idAccountTypeId = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get('Entity').getRecordTypeId();
        Account acct = (Account)ECFMGTestFactory.make(ECFMGDefaultTestData.DefaultAccountData.class, new Account(Name = 'Entity Account', RecordTypeId = idAccountTypeId, School__c = true));
        run();
        Id idContactTypeId = Schema.SObjectType.Contact.getRecordTypeInfosByDeveloperName().get('Entity_Contact').getRecordTypeId();
        Contact con = new Contact(FirstName = 'Entity', LastName = 'User', RecordTypeId = idContactTypeId, Email = email1, AccountId = acct.Id);
        insert con;
        Id p=[Select id from profile where name='4-Customer Community Entity 360' LIMIT 1].id;
        User user = new User(alias='eUser',email=email1,emailencodingkey='UTF-8',lastname='User', languagelocalekey='en_US',localesidkey='en_US',profileid=p,country=country2,IsActive=true,ContactId=con.Id, timezonesidkey=country,username=email1);
        insert user;
        Contact con2 = new Contact(FirstName = 'Entity', LastName = 'User2', RecordTypeId = idContactTypeId, Email = email2, AccountId = acct.Id);
        insert con2;
        User user2 = new User(alias='eUser2',email=email2,emailencodingkey='UTF-8',lastname='User2', languagelocalekey='en_US',localesidkey='en_US',profileid=p,country=country2,IsActive=true,ContactId=con2.Id, timezonesidkey=country,username=email2);
        insert user2;
		Contact con3 = new Contact(FirstName = 'Entity', LastName = 'User3', RecordTypeId = idContactTypeId, Email = email3, AccountId = acct.Id);
        insert con3;
        User user3 = new User(alias='eUser3',email=email3,emailencodingkey='UTF-8',lastname='User3', languagelocalekey='en_US',localesidkey='en_US',profileid=p,country=country2,IsActive=true,ContactId=con3.Id, timezonesidkey=country,username=email3);
        insert user3;
        List<Service__c> myServiceList = new List<Service__c>();
        Service__c serv = new Service__c(Name = 'Performance Data');
        myServiceList.add(serv);
        Service__c serv2 = new Service__c(Name = 'GEMX');
        myServiceList.add(serv2);
        Service__c serv3 = new Service__c(Name = 'Credential Review');
        myServiceList.add(serv3);
        insert myServiceList;
        List<Account2Service__c> myAccServList = new List<Account2Service__c>();
        Account2Service__c acc2Service = new Account2Service__c(Account__c = acct.Id, Active__c = TRUE, Service__c = serv.Id);
        Account2Service__c acc2Service2 = new Account2Service__c(Account__c = acct.Id, Active__c = TRUE, Service__c = serv2.Id);
        Account2Service__c acc2Service3 = new Account2Service__c(Account__c = acct.Id, Active__c = TRUE, Service__c = serv3.Id);
        myAccServList.add(acc2Service);
        myAccServList.add(acc2Service2);
        myAccServList.add(acc2Service3);
        insert myAccServList;
        List<CONTACT2ACCTSERVICE__c> myCon2AccService = new List<CONTACT2ACCTSERVICE__c>();
        CONTACT2ACCTSERVICE__c conService = new CONTACT2ACCTSERVICE__c(Account_Service__c = acc2Service.Id, Role__c = 'User', Service_Contact__c=con.Id);
        CONTACT2ACCTSERVICE__c conService2 = new CONTACT2ACCTSERVICE__c(Account_Service__c = acc2Service2.Id, Role__c = 'User', Service_Contact__c=con2.Id);
        CONTACT2ACCTSERVICE__c conService3 = new CONTACT2ACCTSERVICE__c(Account_Service__c = acc2Service3.Id, Role__c = 'Coordinator', Service_Contact__c=con3.Id);
        CONTACT2ACCTSERVICE__c conService4 = new CONTACT2ACCTSERVICE__c(Account_Service__c = acc2Service2.Id, Role__c = 'User', Service_Contact__c=con2.Id);
        CONTACT2ACCTSERVICE__c conService5 = new CONTACT2ACCTSERVICE__c(Account_Service__c = acc2Service3.Id, Role__c = 'Coordinator', Service_Contact__c=con3.Id);
        myCon2AccService.add(conService);
        myCon2AccService.add(conService2);
        myCon2AccService.add(conService3);
        myCon2AccService.add(conService4);
        myCon2AccService.add(conService5);
        insert myCon2AccService;
        System.assert(myCon2AccService[0].Id != null, 'Contact2AccService is inserted');
        conService.Role__c = 'Coordinator';
        update conService;
        conService.Role__c = 'User';
        update conService;
        delete conService;
        delete conService2;
        delete conService3;
        test.StopTest();
    }
    @isTest static void createCnt2AccServiceRecsTest(){
        String email1 = 'testUser@gmail.com';
        Id idAccountTypeId = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get('Entity').getRecordTypeId();
        Account acct = (Account)ECFMGTestFactory.make(ECFMGDefaultTestData.DefaultAccountData.class, new Account(Name = 'Entity Account', RecordTypeId = idAccountTypeId, School__c = true));
        run();
        Id idContactTypeId = Schema.SObjectType.Contact.getRecordTypeInfosByDeveloperName().get('Entity_Contact').getRecordTypeId();
        Contact con = new Contact(FirstName = 'Entity', LastName = 'User', RecordTypeId = idContactTypeId, Email = email1, AccountId = acct.Id);
        insert con;
        List<Service__c> myServiceList = new List<Service__c>();
        Service__c serv = new Service__c(Name = 'Performance Data');
        myServiceList.add(serv);
        insert myServiceList;
        List<Account2Service__c> myAccServList = new List<Account2Service__c>();
        Account2Service__c acc2Service = new Account2Service__c(Account__c = acct.Id, Active__c = TRUE, Service__c = serv.Id);
        myAccServList.add(acc2Service);
        insert myAccServList; 
        test.startTest();
        CONTACT2ACCTSERVICE__c conAccServiceObj = new CONTACT2ACCTSERVICE__c();
        conAccServiceObj.Role__c = 'User';
        conAccServiceObj.Preferred_mode_of_communication__c = 'Paper';
        conAccServiceObj.Physical_Address__c = 'Test Address';
        conAccServiceObj.List_of_emails__c = '';
        conAccServiceObj.Verification_Website_URL__c = '';
        conAccServiceObj.Credential_Type__c = 'Letter from Dean';
        conAccServiceObj.Account_Service__c = acc2Service.Id;
        conAccServiceObj.Service_Contact__c = con.Id;
        conAccServiceObj.Active__c = true;
        conAccServiceObj.City__c = 'Test City';
        conAccServiceObj.Country__c = 'India';
        conAccServiceObj.Street__c = 'Test Street';
        conAccServiceObj = (CONTACT2ACCTSERVICE__c)ECFMGTestFactory.make(ECFMGDefaultTestData.DefaultContact2AccSerData.class, conAccServiceObj);
        run();
        String jsonString = '{"contactId":"'+con.Id+'","roleName":"User","preferrredModeOfCommunication":"Paper","physicalAddress":"Test Address","listOfEmails":"amirtharaj@enableconsulting.com","verificationWebsiteURL":"","credentialType":"Final Medical Diploma","cityName":"'+conAccServiceObj.City__c+'","countryName":"'+conAccServiceObj.Country__c+'","streetName":"'+conAccServiceObj.Street__c+'"}';
        Contact2AccServiceController.createCnt2AccServiceRecs(jsonString, acc2Service.Id);
        System.assert(conAccServiceObj.Id != null, 'Contact2AccService is inserted');
        test.stopTest();
    }
}